@page "/Account/UpdateAccountDetails"
@using Microsoft.AspNetCore.Components.Forms
@using BlazorApp1.Shared
@using System.Net.Http.Json
@using BlazorApp1.Client.Shared.Components
@using BlazorApp1.Client.Services
@using Blazored.LocalStorage
@using System.Security.Claims
@using BlazorApp1.Client.Auth
@using Microsoft.Extensions.Logging
@using CurrieTechnologies.Razor.SweetAlert2
@using System.Text.Json
@using Blazored.LocalStorage
@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject HttpClient Http
@inject ILogger<UpdateAccountDetails> Logger
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SweetAlertService Swal

@* @if (isLoading)
{
    <div class="loading-screen">
        <div class="d-flex flex-column align-items-center bg-white p-4 rounded shadow">
            <div class="spinner-border text-warning mb-3" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mb-0">@loadingMessage</p>
        </div>
    </div>
} *@

<style>
    .page-container {
        position:relative;
        top: 0;
        right: 0;
        bottom: 0;
        background: #f8f9fa;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0;
        overflow: hidden;
    }

    .card {
        position:relative;
        border: none;
        box-shadow: 0 8px 24px rgba(0,0,0,0.08);
        font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
        border-radius: 16px;
        background: #fff;
        max-width: 800px;
        width: 90%;
        height: auto;
        margin: 2rem auto;
        display: flex;
        flex-direction: column;
    }

    .card-header {
        background: linear-gradient(135deg, #FFC107 0%, #ffca2c 100%);
        color: #212529;
        padding: 1.25rem;
        border: none;
        border-radius: 16px 16px 0 0;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        flex-shrink: 0;
    }

    .header-icon {
        font-size: 1.5rem;
        color: #000;
    }

    .card-header h3 {
        margin: 0;
        font-weight: 600;
        font-size: 1.5rem;
        color: #000;
    }

    .card-body {
        padding: 2rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        max-width: 500px;
        margin: 0 auto;
        width: 100%;
    }

    .form-section {
        margin-bottom: 1rem;
        width: 100%;
    }

    .form-group {
        margin-bottom: 1.5rem;
        width: 100%;
    }

    .button-group {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-top: 1.5rem;
        width: 100%;
    }

    .form-label {
        color: #212529;
        font-weight: 600;
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
        display: block;
    }

    .form-control {
        font-size: 0.95rem;
        line-height: 1.5;
        padding: 0.625rem 1rem;
        border-radius: 12px;
        border: 2px solid #e9ecef;
        width: 100%;
        transition: all 0.2s ease;
    }

    select.form-control {
        appearance: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%23212529' viewBox='0 0 16 16'%3E%3Cpath d='M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        background-size: 16px 12px;
        padding-right: 2.5rem;
    }

    /* Force dropdown to appear below */
    select.form-control,
    select.form-control option {
        position: relative !important;
        inset: unset !important;
        transform: none !important;
        top: unset !important;
        left: unset !important;
        bottom: unset !important;
        right: unset !important;
    }

    /* Style the dropdown options */
    select.form-control option {
        padding: 8px 12px;
        background-color: white;
        color: #212529;
    }

    /* Add custom styles for the dropdown container */
    select.form-control:focus {
        border-color: #FFC107;
        box-shadow: 0 0 0 4px rgba(255, 193, 7, 0.15);
    }

    /* Override any Bootstrap or browser default behaviors */
    .dropdown-menu,
    .dropdown-content {
        position: absolute !important;
        inset: 100% auto auto 0 !important;
        transform: none !important;
        margin-top: 4px !important;
    }

    /* Add styles for the card to ensure proper stacking context */
    .card {
        position: relative;
        z-index: 1;
    }

    .card-body {
        position: relative;
        z-index: 2;
    }

    /* Ensure form controls are above other elements */
    .form-control {
        position: relative;
        z-index: 3;
    }

    .btn-custom {
        background: linear-gradient(135deg, #FFC107 0%, #ffca2c 100%);
        border: none;
        color: #000;
        padding: 0.625rem 1.25rem;
        border-radius: 12px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-custom:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(255, 193, 7, 0.25);
    }

    .btn-secondary {
        background: #f8f9fa;
        border: none;
        color: #212529;
        padding: 0.625rem 1.25rem;
        border-radius: 12px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-secondary:hover {
        background: #e9ecef;
        transform: translateY(-2px);
    }

    .loading-spinner {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 3rem 0;
    }

    .spinner-custom {
        width: 2.5rem;
        height: 2.5rem;
        color: #FFC107;
    }

    @@media (max-width: 768px) {
        .card-body {
            grid-template-columns: 1fr;
            padding: 1rem;
        }

        .card {
            width: 95%;
            margin: 1rem auto;
        }

        .button-group {
            flex-direction: column;
            gap: 0.5rem;
        }

        .btn-secondary {
            margin-left: 0;
        }
    }
</style>

<AuthorizeView Context="authContext">
    <Authorized>
        <div class="page-container">
            <div class="card">
                <div class="card-header">
                    <i class="bi bi-person-gear header-icon"></i>
                    <h3>Update Account Details</h3>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="loading-spinner">
                            <div class="spinner-border spinner-custom" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="form-section">
                            <div class="form-group">
                                <label class="form-label">Full Name</label>
                                <input type="text" class="form-control" @bind="userDetails.FullName" placeholder="Enter your full name" />
                            </div>

                            <div class="form-group">
                                <label class="form-label">Address</label>
                                <textarea class="form-control" @bind="userDetails.Address" rows="3" placeholder="Enter your complete address"></textarea>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Marital Status</label>
                                <select class="form-control" @bind="userDetails.MaritalStatus">
                                    <option value="">Select Marital Status</option>
                                    <option value="Single">Single</option>
                                    <option value="Married">Married</option>
                                    <option value="Divorced">Divorced</option>
                                    <option value="Widowed">Widowed</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Contact Number</label>
                                @if (currentUserRole == "SuperAdmin")
                                {
                                    <input type="tel" class="form-control" 
                                           value="@userDetails.ContactNumber"
                                           @oninput="ValidateContactNumber" 
                                           disabled="true"
                                           placeholder="Enter contact number (e.g., 09123456789)" />
                                    <small class="text-warning">SuperAdmin cannot modify contact number for security reasons.</small>
                                }
                                else
                                {
                                    <input type="tel" class="form-control" 
                                           value="@userDetails.ContactNumber"
                                           @oninput="ValidateContactNumber" 
                                           placeholder="Enter contact number (e.g., 09123456789)" />
                                }
                            </div>

                            <div class="form-group">
                                <label class="form-label">Gender</label>
                                <select class="form-control" @bind="userDetails.Gender">
                                    <option value="">Select Gender</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Nationality</label>
                                <select class="form-control" @bind="userDetails.Nationality">
                                    <option value="">Select Nationality</option>
                                    @foreach (var nation in nationalities)
                                    {
                                        <option value="@nation">@nation</option>
                                    }
                                </select>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Date of Birth</label>
                                <input type="date" class="form-control" @bind="userDetails.DateOfBirth" />
                            </div>
                        </div>

                        <div class="button-group">
                            <button class="btn btn-custom" @onclick="HandleValidSubmit" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Updating...</span>
                                }
                                else
                                {
                                    <span>Update Details</span>
                                }
                            </button>
                            <button class="btn btn-secondary" @onclick="NavigateBack">Back</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-warning">
            <p>Please log in to access this page.</p>
            <button class="btn btn-custom" @onclick="NavigateToLogin">Login</button>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private UserDetailsDto userDetails = new();
    private bool isLoading = true;
    private bool isSubmitting;
    private string token;
    private string currentUserRole;

    private readonly List<string> nationalities = new()
    {
        "Filipino", "American", "British", "Canadian", "Chinese",
        "Japanese", "Korean", "Singaporean", "Australian", "Malaysian"
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation("Initializing UpdateAccountDetails page");
            
            token = await LocalStorage.GetItemAsync<string>("jwt-access-token");
            if (string.IsNullOrEmpty(token))
            {
                Logger.LogWarning("No JWT token found in local storage");
                NavigateToLogin();
                return;
            }

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            currentUserRole = authState.User.FindFirst(ClaimTypes.Role)?.Value;
            
            if (!authState.User.Identity.IsAuthenticated)
            {
                if (AuthenticationStateProvider is CustomAuthProvider authProvider)
                {
                    await authProvider.NotifyUserAuthenticationAsync(token);
                    authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                    currentUserRole = authState.User.FindFirst(ClaimTypes.Role)?.Value;
                }
            }

            if (!authState.User.Identity.IsAuthenticated)
            {
                await HandleError("Authentication failed");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var userIdClaim = authState.User.FindFirst(c => c.Type == "nameid" || c.Type == ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userIdClaim) || !int.TryParse(userIdClaim, out int userId))
            {
                await HandleError("Invalid user ID");
                return;
            }

            var response = await AccountService.GetUserDetailsAsync(userId);
            
            if (response.IsSuccess && response.Data != null)
            {
                userDetails = response.Data;
                userDetails.UserId = userId;
            }
            else
            {
                await HandleError(response.Message ?? "Failed to load user details");
            }
        }
        catch (Exception ex)
        {
            await HandleError(ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (isSubmitting) return;
        isSubmitting = true;

        try
        {
            if (string.IsNullOrEmpty(token))
            {
                await HandleError("Authentication token expired");
                return;
            }

            // Check if user is SuperAdmin
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userRole = authState.User.FindFirst(ClaimTypes.Role)?.Value;
            
            if (userRole == "SuperAdmin")
            {
                await Swal.FireAsync("Prohibited", "SuperAdmin credentials cannot be modified for security reasons.", SweetAlertIcon.Error);
                return;
            }

            var response = await AccountService.UpdateUserDetailsAsync(userDetails);
            if (response.IsSuccess)
            {
                if (response.Data != null)
                {
                    userDetails = response.Data;
                }
                await Swal.FireAsync("Success", "Account details updated successfully", SweetAlertIcon.Success);
                NavigationManager.NavigateTo("/account?refresh=" + DateTime.Now.Ticks);
            }
            else
            {
                await HandleError(response.Message ?? "Failed to update account details");
            }
        }
        catch (Exception ex)
        {
            await HandleError(ex.Message);
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task HandleError(string message)
    {
        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
    }

    private void NavigateBack() => NavigationManager.NavigateTo("/account");
    private void NavigateToLogin() => NavigationManager.NavigateTo("/");

    private async Task ValidateContactNumber(ChangeEventArgs e)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userRole = authState.User.FindFirst(ClaimTypes.Role)?.Value;
        
        if (userRole == "SuperAdmin")
        {
            await Swal.FireAsync("Prohibited", "SuperAdmin cannot modify contact number for security reasons.", SweetAlertIcon.Warning);
            return;
        }

        var number = e.Value?.ToString();
        if (!string.IsNullOrEmpty(number))
        {
            if (number.Length > 11)
            {
                await Swal.FireAsync("Invalid Format", "Contact number cannot exceed 11 digits", SweetAlertIcon.Warning);
                userDetails.ContactNumber = number.Substring(0, 11);
                StateHasChanged();
                return;
            }

            if (number.Length >= 2 && !number.StartsWith("09"))
            {
                await Swal.FireAsync("Invalid Format", "Contact number must start with '09'", SweetAlertIcon.Warning);
                userDetails.ContactNumber = "09" + number.TrimStart('0', '9');
                StateHasChanged();
                return;
            }

            // Check if contact number is already in use
            if (number.Length == 11)
            {
                var response = await AccountService.CheckContactNumberAvailability(number);
                if (!response.IsSuccess)
                {
                    await Swal.FireAsync("Invalid", "This contact number is already registered", SweetAlertIcon.Warning);
                    userDetails.ContactNumber = null;
                    StateHasChanged();
                    return;
                }
            }

            userDetails.ContactNumber = number;
        }
        else
        {
            userDetails.ContactNumber = null;
        }
        StateHasChanged();
    }
}