@page "/Login"
@using BlazorApp1.Client.Services
@using BlazorApp1.Client.Shared.Providers
@using BlazorApp1.Client.Auth
@using BlazorApp1.Shared
@using CurrieTechnologies.Razor.SweetAlert2
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.RegularExpressions
@using System.Text.Json
@using System.Text
@using System.Net
@layout NoMenuLayout
@inject SweetAlertService swal
@inject IHttpClientFactory HttpClientFactory
@inject ILocalStorageService _localStorageService
@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager _navigationManager
@inject IAccountService AccountService

<HeadContent>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap" rel="stylesheet">
</HeadContent>

<style>
    body {
        background-image: url(/B3.jpg);
        background-repeat: no-repeat;
        background-attachment: fixed;
        background-size: cover;
        background-position: center;
        min-height: 100vh;
        margin: 0;
        padding: 0;
        overflow: hidden;
    }

    .login-container {
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 1rem;
        overflow: hidden;
        animation: fadeIn 0.8s ease-out;
    }

    .login-card {
        background-color: rgba(250,250,250,0.3);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.2);
        box-shadow: 0 15px 35px rgba(0,0,0,0.2);
        border-radius: 15px;
        padding: 1.5rem;
        width: 100%;
        max-width: 400px;
        max-height: 90vh;
        overflow-y: auto;
        transform: translateY(0);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        animation: slideUp 0.8s ease-out;
    }

    .login-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 20px 40px rgba(0,0,0,0.3);
    }

    .logo {
        width: auto;
        height: 6.5rem;
        margin-bottom: 1rem;
        filter: drop-shadow(0 4px 6px rgba(0,0,0,0.1));
        animation: pulse 2s infinite;
    }

    .login-title {
        font-family: 'Montserrat', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
        color: #333;
        font-size: 1.75rem;
        font-weight: 600;
        letter-spacing: 3px;
        margin-bottom: 1.5rem;
        text-align: center;
        text-transform: uppercase;
        position: relative;
        animation: fadeInDown 0.8s ease-out;
    }

    .login-title::after {
        content: '';
        position: absolute;
        bottom: -10px;
        left: 50%;
        transform: translateX(-50%);
        width: 50px;
        height: 3px;
        background: #F9B42D;
        border-radius: 3px;
    }

    .form-label {
        font-family: 'Montserrat', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
        letter-spacing: 2px;
        font-weight: 500;
        color: #333;
        transform: translateX(0);
        transition: transform 0.3s ease;
    }

    .form-control {
        background-color: rgba(255,255,255,0.9);
        border: 1px solid rgba(0,0,0,0.1);
        border-radius: 8px;
        padding: 0.75rem 1rem;
        padding-right: 3rem;
        transition: all 0.3s ease;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
        width: 100%;
        transform: translateX(0);
    }

    /* Hide browser's default password toggle */
    input[type="password"]::-ms-reveal,
    input[type="password"]::-ms-clear,
    input[type="password"]::-webkit-contacts-auto-fill-button,
    input[type="password"]::-webkit-credentials-auto-fill-button {
        display: none !important;
    }

    input[type="password"]::-webkit-inner-spin-button,
    input[type="password"]::-webkit-outer-spin-button,
    input[type="password"]::-webkit-search-cancel-button {
        -webkit-appearance: none;
        margin: 0;
    }

    .password-field {
        position: relative;
        display: flex;
        align-items: center;
    }

    .password-toggle {
        position: absolute;
        right: 1rem;
        background: none;
        border: none;
        cursor: pointer;
        color: #666;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        z-index: 2;
        width: 24px;
        height: 24px;
    }

    .password-toggle:hover {
        color: #F9B42D;
    }

    .password-toggle:focus {
        outline: none;
    }

    .password-toggle i {
        font-size: 1.2rem;
        line-height: 1;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .form-control:focus {
        background-color: #fff;
        box-shadow: 0 0 0 3px rgba(249, 180, 45, 0.25);
        border-color: #F9B42D;
        transform: translateX(0);
    }

    .btn-login {
        background-color: #F9B42D;
        border: none;
        border-radius: 8px;
        color: white;
        font-family: 'Montserrat', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
        font-weight: 600;
        letter-spacing: 2px;
        padding: 0.75rem 2rem;
        text-transform: uppercase;
        transition: all 0.3s ease;
        width: 100%;
        margin-bottom: 1rem;
        position: relative;
        overflow: hidden;
    }

    .btn-login::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: 0.5s;
    }

    .btn-login:hover::before {
        left: 100%;
    }

    .btn-login:hover {
        background-color: #e6a012;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(249, 180, 45, 0.3);
    }

    .btn-login:active {
        transform: translateY(0);
    }

    .signup-text {
        font-family: 'Montserrat', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
        letter-spacing: 2px;
        color: #333;
        text-align: center;
        margin: 1.5rem 0;
        animation: fadeIn 0.8s ease-out;
    }

    .mb-3 {
        margin-bottom: 1rem !important;
    }

    @@media (max-width: 576px) {
        .login-card {
            padding: 1.5rem;
        }

        .logo {
            height: 7rem;
        }

        .login-title {
            font-size: 1.5rem;
        }
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        animation: fadeIn 0.3s ease-out;
    }

    .loading-content {
        background-color: white;
        padding: 2rem;
        border-radius: 10px;
        text-align: center;
        animation: scaleIn 0.3s ease-out;
    }

    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #f3f3f3;
        border-top: 5px solid #F9B42D;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 1rem;
    }

    .loading-text {
        font-family: 'Montserrat', sans-serif;
        color: #333;
        font-size: 1.1rem;
        margin-top: 1rem;
        animation: fadeIn 0.3s ease-out;
    }

    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes slideInLeft {
        from {
            opacity: 0;
            transform: translateX(-20px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @@keyframes fadeInDown {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    @@keyframes scaleIn {
        from {
            opacity: 0;
            transform: scale(0.9);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    /* Back Button Styles */
    .back-button {
        position: fixed;
        top: 2rem;
        left: 2rem;
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        padding: 0.75rem 1.5rem;
        border-radius: 50px;
        color: #000;
        text-decoration: none;
        font-family: 'Montserrat', sans-serif;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        animation: slideInLeft 0.8s ease-out;
    }

    .back-button i {
        transition: transform 0.3s ease;
    }

    .back-button:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: translateY(-2px) translateX(5px);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
    }

    .back-button:hover i {
        transform: translateX(-5px);
    }

    @@media (max-width: 768px) {
        .back-button {
            top: 1rem;
            left: 1rem;
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
        }
    }

    .forgot-password-link {
        color: #333;
        text-decoration: none;
        font-family: 'Montserrat', sans-serif;
        font-size: 0.9rem;
        transition: all 0.3s ease;
        display: inline-block;
        margin-top: 0.5rem;
    }

    .forgot-password-link:hover {
        color: #F9B42D;
        text-decoration: underline;
    }
</style>

<a href="/" class="back-button">
    <i class="fas fa-arrow-left"></i>
    Back to Home
</a>

<div class="login-container">
    @if (isLoading)
    {
        <div class="loading-overlay">
            <div class="loading-content">
                <div class="loading-spinner"></div>
                <div class="loading-text">Please wait while the system is loading...</div>
            </div>
        </div>
    }
    <div class="text-center">
        <img src="/LogoA2.png" alt="Roosevelt Park Village" class="logo" />
        <div class="login-card">
            <h4 class="login-title">Login</h4>
            <EditForm Model="LoginModel" OnValidSubmit="ValidateAndSubmit">
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <InputText id="email" class="form-control" @bind-Value="LoginModel.Email" type="email" placeholder="Enter email" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <div class="password-field">
                        <InputText id="password" 
                                  class="form-control" 
                                  @bind-Value="LoginModel.Password" 
                                  type="@(showPassword ? "text" : "password")" 
                                  placeholder="Enter password"
                                  autocomplete="current-password" />
                        <button type="button" 
                                class="password-toggle" 
                                @onclick="() => { showPassword = !showPassword; StateHasChanged(); }" 
                                @onclick:preventDefault 
                                @onclick:stopPropagation 
                                tabindex="-1">
                            <i class="bi @(showPassword ? "bi-eye-slash-fill" : "bi-eye-fill")" />
                        </button>
                    </div>
                </div>

                <button type="submit" class="btn-login">Login</button>
            </EditForm>
            <div class="text-center mb-3">
                <a href="/forgot-password" class="forgot-password-link">Forgot Password?</a>
            </div>
            <div class="signup-text">DON'T HAVE AN ACCOUNT YET?</div>
            <button class="btn-login" @onclick="NavigateToRegister">Create Account</button>
        </div>
    </div>
</div>

@code {
    private LoginVm LoginModel = new LoginVm();
    private bool isLoading = false;
    private bool showPassword = false;

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task ValidateAndSubmit()
    {
        var validationErrors = ValidateLoginModel(LoginModel);

        if (validationErrors.Any())
        {
            await swal.FireAsync("Login Error", string.Join("\n", validationErrors), SweetAlertIcon.Error);
        }
        else
        {
            await HandleValidSubmit();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            var response = await AccountService.LoginAsync(LoginModel);

            if (response.IsSuccess)
            {
                await _localStorageService.SetItemAsync<string>("jwt-access-token", response.Data);
                if (_authStateProvider is CustomAuthProvider authProvider)
                {
                    await authProvider.NotifyUserAuthenticationAsync(response.Data);
                    var authState = await _authStateProvider.GetAuthenticationStateAsync();
                    var user = authState.User;

                    // Redirect based on role
                    if (user.IsInRole("Client"))
                    {
                        _navigationManager.NavigateTo("/client");
                    }
                    else if (user.IsInRole("SuperAdmin") || user.IsInRole("Admin") || user.IsInRole("User"))
                    {
                        _navigationManager.NavigateTo("/Admin");
                    }
                    else
                    {
                        _navigationManager.NavigateTo("/");
                    }
                }
            }
            else
            {
                await swal.FireAsync("Login Failed", response.Message, SweetAlertIcon.Error);
            }
        }
        catch (Exception ex)
        {
            await swal.FireAsync("Error", $"An error occurred during login: {ex.Message}", SweetAlertIcon.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private List<string> ValidateLoginModel(LoginVm model)
    {
        var errors = new List<string>();

        if (string.IsNullOrWhiteSpace(model.Email) || !Regex.IsMatch(model.Email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$", RegexOptions.IgnoreCase))
        {
            errors.Add("Invalid Email");
        }
        else if (string.IsNullOrWhiteSpace(model.Password))
        {
            errors.Add("Invalid Credentials");
        }

        return errors;
    }

    private void NavigateToRegister()
    {
        _navigationManager.NavigateTo("/signup");
    }
}

