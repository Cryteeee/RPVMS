@page "/admin/event-management"
@using BlazorApp1.Shared.Models
@using BlazorApp1.Client.Services
@using Microsoft.AspNetCore.Authorization
@inject IEventService EventService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "SuperAdmin")]

<PageTitle>Event Management - Village Management System</PageTitle>

<div class="container-fluid mt-4">
    <div class="card">
        <div class="card-body">
            <div class="row mb-4">
                <div class="col">
                    <h2>Event Management</h2>
                    <button class="btn btn-primary" @onclick="OpenCreateDialog">
                        <i class="fas fa-plus"></i> Create New Event
                    </button>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input type="text" class="form-control" placeholder="Search events..." @bind="searchString" @bind:event="oninput">
                    </div>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Event Date</th>
                                <th>Expiry Date</th>
                                <th>Location</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var eventItem in FilteredEvents)
                            {
                                <tr>
                                    <td>@eventItem.Title</td>
                                    <td>@eventItem.EventDate.ToLocalTime().ToString("g")</td>
                                    <td>@eventItem.ExpiryDate.ToLocalTime().ToString("g")</td>
                                    <td>@eventItem.Location</td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(eventItem.Status)">
                                            @eventItem.Status
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => OpenEditDialog(eventItem)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => OpenDeleteDialog(eventItem)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                            @if (eventItem.Status != "Expired")
                                            {
                                                <button class="btn btn-sm btn-outline-info" @onclick="() => OpenStatusDialog(eventItem)">
                                                    <i class="fas fa-sync-alt"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@if (showCreateDialog)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Event</h5>
                    <button type="button" class="btn-close" @onclick="CloseCreateDialog"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="createEventDto" OnValidSubmit="CreateEvent">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Title</label>
                            <InputText class="form-control" @bind-Value="createEventDto.Title" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea class="form-control" @bind-Value="createEventDto.Description" rows="3" />
                        </div>

                        <div class="row mb-3">
                            <div class="col">
                                <label class="form-label">Event Date</label>
                                <InputDate class="form-control" @bind-Value="createEventDto.EventDate" />
                            </div>
                            <div class="col">
                                <label class="form-label">Expiry Date</label>
                                <InputDate class="form-control" @bind-Value="createEventDto.ExpiryDate" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Location</label>
                            <InputText class="form-control" @bind-Value="createEventDto.Location" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Event Type</label>
                            <InputText class="form-control" @bind-Value="createEventDto.EventType" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Event Image</label>
                            <InputFile OnChange="OnFileSelected" class="form-control" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseCreateDialog">Cancel</button>
                            <button type="submit" class="btn btn-primary">Create</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showEditDialog)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Event</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditDialog"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="updateEventDto" OnValidSubmit="UpdateEvent">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Title</label>
                            <InputText class="form-control" @bind-Value="updateEventDto.Title" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea class="form-control" @bind-Value="updateEventDto.Description" rows="3" />
                        </div>

                        <div class="row mb-3">
                            <div class="col">
                                <label class="form-label">Event Date</label>
                                <InputDate class="form-control" @bind-Value="updateEventDto.EventDate" />
                            </div>
                            <div class="col">
                                <label class="form-label">Expiry Date</label>
                                <InputDate class="form-control" @bind-Value="updateEventDto.ExpiryDate" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Location</label>
                            <InputText class="form-control" @bind-Value="updateEventDto.Location" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Event Type</label>
                            <InputText class="form-control" @bind-Value="updateEventDto.EventType" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Event Image</label>
                            <InputFile OnChange="OnFileSelected" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label class="form-check-label">
                                <InputCheckbox @bind-Value="updateEventDto.IsActive" /> Is Active
                            </label>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseEditDialog">Cancel</button>
                            <button type="submit" class="btn btn-primary">Update</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showDeleteDialog)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Event</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteDialog"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this event?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteDialog">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteEvent">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showStatusDialog)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Update Status</h5>
                    <button type="button" class="btn-close" @onclick="CloseStatusDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Status</label>
                        <select class="form-select" @bind="selectedStatus">
                            <option value="Active">Active</option>
                            <option value="Cancelled">Cancelled</option>
                            <option value="Completed">Completed</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseStatusDialog">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="UpdateEventStatus">Update</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<EventListDto> events = new();
    private string searchString = "";
    private bool isLoading = true;
    private bool showCreateDialog = false;
    private bool showEditDialog = false;
    private bool showDeleteDialog = false;
    private bool showStatusDialog = false;
    private CreateEventDto createEventDto = new();
    private UpdateEventDto updateEventDto = new();
    private EventListDto selectedEvent;
    private string selectedStatus;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            isLoading = true;
            events = await EventService.GetAllEventsAsync();
        }
        catch (Exception ex)
        {
            // Handle error (you might want to show an error message)
            events = new List<EventListDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private IEnumerable<EventListDto> FilteredEvents =>
        string.IsNullOrWhiteSpace(searchString)
            ? events
            : events.Where(e =>
                e.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                e.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                e.Location.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                e.EventType.Contains(searchString, StringComparison.OrdinalIgnoreCase));

    private string GetStatusBadgeClass(string status) => status switch
    {
        "Active" => "bg-success",
        "Cancelled" => "bg-danger",
        "Completed" => "bg-info",
        "Expired" => "bg-warning",
        _ => "bg-secondary"
    };

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            
            if (showCreateDialog)
            {
                createEventDto.ImageContent = buffer;
                createEventDto.ImageFileName = file.Name;
                createEventDto.ImageContentType = file.ContentType;
            }
            else if (showEditDialog)
            {
                updateEventDto.ImageContent = buffer;
                updateEventDto.ImageFileName = file.Name;
                updateEventDto.ImageContentType = file.ContentType;
            }
        }
    }

    private void OpenCreateDialog()
    {
        createEventDto = new CreateEventDto
        {
            EventDate = DateTime.Today,
            ExpiryDate = DateTime.Today.AddMonths(1)
        };
        showCreateDialog = true;
    }

    private async Task CreateEvent()
    {
        try
        {
            var newEvent = await EventService.CreateEventAsync(createEventDto);
            await LoadEvents();
            showCreateDialog = false;
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }

    private void OpenEditDialog(EventListDto eventDto)
    {
        updateEventDto = new UpdateEventDto
        {
            Id = eventDto.Id,
            Title = eventDto.Title,
            Description = eventDto.Description,
            EventDate = eventDto.EventDate,
            ExpiryDate = eventDto.ExpiryDate,
            Location = eventDto.Location,
            EventType = eventDto.EventType,
            IsActive = eventDto.IsActive
        };
        showEditDialog = true;
    }

    private async Task UpdateEvent()
    {
        try
        {
            var updatedEvent = await EventService.UpdateEventAsync(updateEventDto);
            await LoadEvents();
            showEditDialog = false;
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }

    private void OpenDeleteDialog(EventListDto eventDto)
    {
        selectedEvent = eventDto;
        showDeleteDialog = true;
    }

    private async Task DeleteEvent()
    {
        try
        {
            var success = await EventService.DeleteEventAsync(selectedEvent.Id);
            if (success)
            {
                await LoadEvents();
            }
            showDeleteDialog = false;
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }

    private void OpenStatusDialog(EventListDto eventDto)
    {
        selectedEvent = eventDto;
        selectedStatus = eventDto.Status;
        showStatusDialog = true;
    }

    private async Task UpdateEventStatus()
    {
        try
        {
            var success = await EventService.UpdateEventStatusAsync(selectedEvent.Id, selectedStatus);
            if (success)
            {
                await LoadEvents();
            }
            showStatusDialog = false;
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }

    private void CloseCreateDialog() => showCreateDialog = false;
    private void CloseEditDialog() => showEditDialog = false;
    private void CloseDeleteDialog() => showDeleteDialog = false;
    private void CloseStatusDialog() => showStatusDialog = false;
} 