@page "/admin/concerns/archive"
@using BlazorApp1.Client.Auth
@using BlazorApp1.Shared
@using BlazorApp1.Shared.Models
@using BlazorApp1.Client.Services
@using System.Security.Claims
@using BlazorApp1.Shared.Enums
@using Microsoft.AspNetCore.Components.Authorization
@using CurrieTechnologies.Razor.SweetAlert2
@inject ISubmissionService SubmissionService
@inject IContactService ContactService
@inject ILogger<Archive> Logger
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Archived Concerns</PageTitle>

<div class="archive-container">
    <div class="archive-header">
        <h1>Archived Concerns</h1>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/admin/dashboard">Dashboard</a></li>
                <li class="breadcrumb-item active">Archived Concerns</li>
            </ol>
        </nav>
    </div>

    <AuthorizeView Roles="SuperAdmin,Admin" Context="mainAuth">
        <Authorized>
            <div class="content-card">
                <div class="filters-container">
                    <div class="filter-group">
                        <div class="filter-item">
                            <label for="entriesDropdown">Show entries</label>
                            <select id="entriesDropdown" class="custom-select" @bind="entriesPerPage">
                                <option value="5">5 per page</option>
                                <option value="10">10 per page</option>
                                <option value="25">25 per page</option>
                                <option value="50">50 per page</option>
                            </select>
                        </div>
                        <div class="filter-item">
                            <label for="sortDropdown">Sort by</label>
                            <select id="sortDropdown" class="custom-select" @bind="sortOrder">
                                <option value="newest">Newest first</option>
                                <option value="oldest">Oldest first</option>
                            </select>
                        </div>
                        <div class="filter-item">
                            <label for="statusDropdown">Status</label>
                            <select id="statusDropdown" class="custom-select" @bind="filterStatus">
                                <option value="">All Status</option>
                                <option value="Resolved">Resolved</option>
                                <option value="Deleted">Deleted</option>
                            </select>
                        </div>
                    </div>
                </div>

                <AuthorizeView Roles="SuperAdmin" Context="superAdminAuth">
                    <Authorized>
                        <div class="admin-actions">
                            <button class="btn-danger" @onclick="DeleteAllDeletedSubmissionsConfirmation">
                                <i class="fas fa-trash-alt"></i>
                                Delete All Deleted Submissions
                            </button>
                            <button class="btn-warning" @onclick="DeleteAllResolvedSubmissionsConfirmation">
                                <i class="fas fa-broom"></i>
                                Clean Up Resolved
                            </button>
                        </div>
                    </Authorized>
                </AuthorizeView>

                @if (isLoading)
                {
                    <div class="loading-container">
                        <div class="loader"></div>
                        <span>Loading archives...</span>
                    </div>
                }
                else if (FilteredSubmissions.Any())
                {
                    <div class="table-responsive">
                        <table class="modern-table">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Title</th>
                                    <th>Category</th>
                                    <th>Status</th>
                                    <th>Date Archived</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var submission in FilteredSubmissions.Skip((currentPage - 1) * entriesPerPage).Take(entriesPerPage))
                                {
                                    <tr class="table-row">
                                        <td>@submission.Id</td>
                                        <td>
                                            <div class="submission-title">
                                                <span class="title">@submission.Subject</span>
                                                <span class="email">@submission.UserEmail</span>
                                            </div>
                                        </td>
                                        <td>
                                            <span class="category-badge">@submission.Category</span>
                                        </td>
                                        <td>
                                            <span class="status-badge @GetStatusBadgeClass(submission.Status)">
                                                @GetStatusDisplay(submission.Status)
                                            </span>
                                        </td>
                                        <td>
                                            <div class="date-info">
                                                <span class="date">@submission.LastUpdated.ToString("MMM dd, yyyy")</span>
                                                <span class="time">@submission.LastUpdated.ToString("HH:mm")</span>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="action-buttons">
                                                <button class="action-btn view" @onclick="() => ViewDetails(submission)" title="View Details">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button class="action-btn restore" @onclick="() => RestoreSubmission(submission.Id)" title="Restore">
                                                    <i class="fas fa-undo"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="pagination-container">
                        <div class="pagination-info">
                            Showing <span>@((currentPage - 1) * entriesPerPage + 1)</span> to 
                            <span>@Math.Min(currentPage * entriesPerPage, FilteredSubmissions.Count())</span> of 
                            <span>@FilteredSubmissions.Count()</span> entries
                        </div>
                        <div class="pagination-controls">
                            <button class="page-btn" @onclick="() => ChangePage(1)" disabled="@(currentPage == 1)">
                                <i class="fas fa-angle-double-left"></i>
                            </button>
                            <button class="page-btn" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">
                                <i class="fas fa-angle-left"></i>
                            </button>
                            
                            @for (int i = GetStartPage(); i <= GetEndPage(); i++)
                            {
                                var pageNumber = i;
                                <button class="page-btn @(pageNumber == currentPage ? "active" : "")" 
                                        @onclick="() => ChangePage(pageNumber)">
                                    @pageNumber
                                </button>
                            }
                            
                            <button class="page-btn" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == TotalPages)">
                                <i class="fas fa-angle-right"></i>
                            </button>
                            <button class="page-btn" @onclick="() => ChangePage(TotalPages)" disabled="@(currentPage == TotalPages)">
                                <i class="fas fa-angle-double-right"></i>
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <i class="fas fa-archive"></i>
                        <h3>No Archives Found</h3>
                        <p>There are no archived submissions to display.</p>
                    </div>
                }
            </div>

            @if (selectedSubmission != null)
            {
                <div class="modal-overlay">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5>Submission Details</h5>
                                <button class="close-btn" @onclick="CloseModal">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                            <div class="modal-body">
                                <div class="details-grid">
                                    <div class="detail-item">
                                        <label>Title</label>
                                        <p>@selectedSubmission.Subject</p>
                                    </div>
                                    <div class="detail-item">
                                        <label>Category</label>
                                        <p>@selectedSubmission.Category</p>
                                    </div>
                                    <div class="detail-item">
                                        <label>Status</label>
                                        <span class="status-badge @GetStatusBadgeClass(selectedSubmission.Status)">
                                            @GetStatusDisplay(selectedSubmission.Status)
                                        </span>
                                    </div>
                                    <div class="detail-item">
                                        <label>Priority</label>
                                        <span class="priority-badge @GetPriorityBadgeClass(selectedSubmission.Priority)">
                                            @selectedSubmission.Priority
                                        </span>
                                    </div>
                                    <div class="detail-item full-width">
                                        <label>Description</label>
                                        <p class="description">@selectedSubmission.Description</p>
                                    </div>
                                    <div class="detail-item">
                                        <label>Submitted By</label>
                                        <p>@selectedSubmission.UserEmail</p>
                                    </div>
                                    <div class="detail-item">
                                        <label>Submission Date</label>
                                        <p>@selectedSubmission.SubmittedDate.ToString("MMM dd, yyyy HH:mm")</p>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button class="btn-secondary" @onclick="CloseModal">Close</button>
                                <button class="btn-restore" @onclick="() => RestoreSubmission(selectedSubmission.Id)">
                                    <i class="fas fa-undo"></i>
                                    Restore
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </Authorized>
        <NotAuthorized>
            <div class="access-denied">
                <i class="fas fa-lock"></i>
                <h2>Access Denied</h2>
                <p>You do not have permission to view this page.</p>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

<style>
    .archive-container {
        padding: 2rem;
        background: #f8f9fa;
        min-height: 100vh;
    }

    .archive-header {
        margin-bottom: 2rem;
        position: relative;
        padding-bottom: 1rem;
    }

    .archive-header::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 60px;
        height: 4px;
        background: #ffd700;
        border-radius: 2px;
    }

    .archive-header h1 {
        font-size: 2rem;
        color: #2d3748;
        margin-bottom: 0.5rem;
        font-weight: 600;
        letter-spacing: -0.025em;
    }

    .breadcrumb {
        background: transparent;
        padding: 0;
        margin: 0;
    }

    .breadcrumb-item a {
        color: #ffd700;
        text-decoration: none;
    }

    .breadcrumb-item.active {
        color: #4a5568;
    }

    .content-card {
        background: white;
        border-radius: 1rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        padding: 1.5rem;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .content-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 12px -1px rgba(0, 0, 0, 0.1), 0 4px 6px -1px rgba(0, 0, 0, 0.06);
    }

    .filters-container {
        margin-bottom: 2rem;
    }

    .filter-group {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
        align-items: flex-end;
        background: #f8fafc;
        padding: 1.5rem;
        border-radius: 0.75rem;
        margin-bottom: 2rem;
    }

    .filter-item {
        flex: 1;
        min-width: 200px;
    }

    .filter-item label {
        display: block;
        margin-bottom: 0.5rem;
        color: #4a5568;
        font-size: 0.875rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .custom-select {
        width: 100%;
        padding: 0.875rem 1rem;
        border: 2px solid #e2e8f0;
        border-radius: 0.5rem;
        background-color: white;
        color: #2d3748;
        font-size: 0.875rem;
        transition: all 0.2s ease;
        cursor: pointer;
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='%234a5568' viewBox='0 0 16 16'%3E%3Cpath d='M8 11L3 6h10l-5 5z'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        background-size: 12px;
    }

    .custom-select:hover {
        border-color: #cbd5e0;
    }

    .custom-select:focus {
        outline: none;
        border-color: #ffd700;
        box-shadow: 0 0 0 3px rgba(255, 215, 0, 0.2);
    }

    .modern-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        margin-bottom: 1rem;
    }

    .modern-table th {
        background: #f8fafc;
        color: #2d3748;
        font-weight: 600;
        padding: 1.25rem 1rem;
        text-align: left;
        border-bottom: 2px solid #e2e8f0;
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .table-row {
        transition: all 0.2s ease;
    }

    .table-row:hover {
        background-color: #f8fafc;
        transform: scale(1.01);
    }

    .table-row td {
        padding: 1.25rem 1rem;
        border-bottom: 1px solid #e2e8f0;
        color: #4a5568;
        font-size: 0.875rem;
    }

    .submission-title {
        display: flex;
        flex-direction: column;
    }

    .submission-title .title {
        color: #2d3748;
        font-weight: 500;
        margin-bottom: 0.25rem;
    }

    .submission-title .email {
        color: #718096;
        font-size: 0.75rem;
    }

    .category-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        background: #edf2f7;
        color: #2d3748;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .status-badge {
        display: inline-flex;
        align-items: center;
        padding: 0.5rem 1rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        transition: all 0.2s ease;
    }

    .status-resolved {
        background-color: #def7ec;
        color: #046c4e;
    }

    .status-resolved:hover {
        background-color: #bcf0da;
    }

    .status-rejected {
        background-color: #fee2e2;
        color: #991b1b;
    }

    .status-rejected:hover {
        background-color: #fecaca;
    }

    .status-pending {
        background-color: #fef3c7;
        color: #92400e;
    }

    .status-pending:hover {
        background-color: #fde68a;
    }

    .date-info {
        display: flex;
        flex-direction: column;
    }

    .date-info .date {
        color: #2d3748;
        font-weight: 500;
    }

    .date-info .time {
        color: #718096;
        font-size: 0.75rem;
    }

    .action-buttons {
        display: flex;
        gap: 0.75rem;
    }

    .action-btn {
        padding: 0.625rem;
        border: none;
        border-radius: 0.5rem;
        background: #f8fafc;
        color: #64748b;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .action-btn:hover {
        transform: translateY(-2px);
    }

    .action-btn.view:hover {
        background: #ffd700;
        color: #2d3748;
    }

    .action-btn.restore:hover {
        background: #def7ec;
        color: #046c4e;
    }

    .pagination-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 2rem;
        padding-top: 1.5rem;
        border-top: 1px solid #e2e8f0;
    }

    .pagination-info {
        color: #718096;
        font-size: 0.875rem;
    }

    .pagination-info span {
        color: #2d3748;
        font-weight: 500;
    }

    .pagination-controls {
        display: flex;
        gap: 0.25rem;
    }

    .page-btn {
        padding: 0.625rem 1rem;
        border: 2px solid #e2e8f0;
        background: white;
        color: #4a5568;
        border-radius: 0.5rem;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .page-btn:hover:not(:disabled) {
        background: #f8fafc;
        border-color: #ffd700;
        color: #2d3748;
        transform: translateY(-2px);
    }

    .page-btn.active {
        background: #ffd700;
        border-color: #ffd700;
        color: #2d3748;
        font-weight: 600;
    }

    .page-btn:disabled {
        background: #f7fafc;
        color: #a0aec0;
        cursor: not-allowed;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 3rem;
        color: #718096;
    }

    .loader {
        border: 3px solid #f3f3f3;
        border-top: 3px solid #ffd700;
        border-radius: 50%;
        width: 48px;
        height: 48px;
        animation: spin 1s linear infinite;
        margin-bottom: 1rem;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        color: #718096;
        background: #f8fafc;
        border-radius: 1rem;
        margin: 2rem 0;
    }

    .empty-state i {
        font-size: 3.5rem;
        margin-bottom: 1.5rem;
        color: #ffd700;
    }

    .empty-state h3 {
        color: #2d3748;
        margin-bottom: 1rem;
        font-weight: 600;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-dialog {
        width: 90%;
        max-width: 800px;
        background: white;
        border-radius: 1rem;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem;
        border-bottom: 1px solid #e2e8f0;
    }

    .modal-header h5 {
        color: #2d3748;
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0;
    }

    .close-btn {
        background: transparent;
        border: none;
        color: #718096;
        cursor: pointer;
        padding: 0.5rem;
        transition: color 0.2s;
    }

    .close-btn:hover {
        color: #2d3748;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .details-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    .detail-item {
        display: flex;
        flex-direction: column;
    }

    .detail-item.full-width {
        grid-column: 1 / -1;
    }

    .detail-item label {
        color: #718096;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
    }

    .detail-item p {
        color: #2d3748;
        margin: 0;
    }

    .detail-item .description {
        white-space: pre-wrap;
    }

    .priority-badge {
        display: inline-flex;
        align-items: center;
        padding: 0.375rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        padding: 1.5rem;
        border-top: 1px solid #e2e8f0;
    }

    .btn-secondary {
        padding: 0.75rem 1.5rem;
        border: 1px solid #e2e8f0;
        background: white;
        color: #4a5568;
        border-radius: 0.5rem;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.2s;
    }

    .btn-secondary:hover {
        background: #f7fafc;
        border-color: #cbd5e0;
    }

    .btn-restore {
        padding: 0.75rem 1.5rem;
        border: none;
        background: #ffd700;
        color: #2d3748;
        border-radius: 0.5rem;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-restore:hover {
        background: #fcc419;
    }

    .access-denied {
        text-align: center;
        padding: 3rem;
        background: white;
        border-radius: 1rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }

    .access-denied i {
        font-size: 3rem;
        color: #fc8181;
        margin-bottom: 1rem;
    }

    .access-denied h2 {
        color: #2d3748;
        margin-bottom: 0.5rem;
    }

    .access-denied p {
        color: #718096;
    }

    @@media (max-width: 768px) {
        .archive-container {
            padding: 1rem;
        }

        .filter-item {
            min-width: 100%;
        }

        .filter-group {
            padding: 1rem;
        }

        .pagination-container {
            flex-direction: column;
            align-items: stretch;
            gap: 1rem;
        }

        .pagination-controls {
            justify-content: center;
        }

        .page-btn {
            padding: 0.5rem 0.75rem;
        }

        .modal-dialog {
            width: 95%;
            margin: 1rem;
        }
    }

    .admin-actions {
        margin-bottom: 2rem;
        padding: 1rem;
        background: #fff5f5;
        border-radius: 0.75rem;
        border: 1px solid #fecaca;
        display: flex;
        justify-content: flex-end;
    }

    .btn-danger {
        padding: 0.75rem 1.5rem;
        background-color: #dc3545;
        color: white;
        border: none;
        border-radius: 0.5rem;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-danger:hover {
        background-color: #c82333;
        transform: translateY(-1px);
    }

    .btn-danger:active {
        transform: translateY(0);
    }

    .btn-danger i {
        font-size: 1rem;
    }

    .btn-warning {
        padding: 0.75rem 1.5rem;
        background-color: #ffc107;
        color: #2d3748;
        border: none;
        border-radius: 0.5rem;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-left: 1rem;
    }

    .btn-warning:hover {
        background-color: #e0a800;
        transform: translateY(-1px);
    }

    .btn-warning:active {
        transform: translateY(0);
    }

    .btn-warning i {
        font-size: 1rem;
    }
</style>

@code {
    private List<SubmissionDto> archivedSubmissions = new();
    private SubmissionDto? selectedSubmission;
    private bool isLoading = true;
    private int currentPage = 1;
    private int entriesPerPage = 10;
    private string sortOrder = "newest";
    private string filterStatus = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadArchivedSubmissions();
    }

    private async Task LoadArchivedSubmissions()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            // Get archived submissions from both services
            var clientSubmissions = await SubmissionService.GetArchivedSubmissionsAsync() ?? new List<SubmissionDto>();
            var contactForms = await ContactService.GetArchivedFormsAsync() ?? new List<SubmissionDto>();
            
            // Log the counts for debugging
            Logger.LogInformation($"Retrieved {clientSubmissions.Count} client submissions and {contactForms.Count} contact forms");
            
            // Combine both lists and sort by LastUpdated date
            archivedSubmissions = clientSubmissions.Concat(contactForms)
                .OrderByDescending(s => s.LastUpdated)
                .ToList();
                
            Logger.LogInformation($"Total combined archived items: {archivedSubmissions.Count}");
            
            // Log details of each submission for debugging
            foreach (var item in archivedSubmissions)
            {
                Logger.LogDebug($"Archived item: ID={item.Id}, Type={item.Type}, Status={item.Status}, IsClientSubmission={item.IsClientSubmission}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading archived submissions");
            await Swal.FireAsync(
                "Error",
                "Failed to load archived submissions. Please try refreshing the page.",
                SweetAlertIcon.Error
            );
            archivedSubmissions = new List<SubmissionDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private IEnumerable<SubmissionDto> FilteredSubmissions
    {
        get
        {
            var filtered = archivedSubmissions.AsEnumerable();

            // Apply status filter
            if (!string.IsNullOrEmpty(filterStatus))
            {
                filtered = filtered.Where(s => s.Status.ToString() == filterStatus);
            }

            // Apply sorting
            filtered = sortOrder == "newest" 
                ? filtered.OrderByDescending(s => s.LastUpdated)
                : filtered.OrderBy(s => s.LastUpdated);

            return filtered;
        }
    }

    private int TotalPages => (int)Math.Ceiling(FilteredSubmissions.Count() / (double)entriesPerPage);

    private void ChangePage(int page)
    {
        currentPage = Math.Max(1, Math.Min(page, TotalPages));
    }

    private void ViewDetails(SubmissionDto submission)
    {
        selectedSubmission = submission;
    }

    private void CloseModal()
    {
        selectedSubmission = null;
    }

    private async Task RestoreSubmission(int id)
    {
        try
        {
            // Get the submission from the filtered list
            var submission = archivedSubmissions.FirstOrDefault(s => s.Id == id);
            if (submission == null)
            {
                await Swal.FireAsync("Error", "Could not find the submission to restore.", SweetAlertIcon.Error);
                return;
            }

            bool result;
            string submissionType = submission.IsClientSubmission ? "client submission" : "contact form";
            
            Logger.LogInformation("Attempting to restore {type} with ID {id}", submissionType, id);
            
            if (submission.IsClientSubmission)
            {
                result = await SubmissionService.RestoreSubmissionAsync(id);
            }
            else
            {
                result = await ContactService.RestoreFormAsync(id);
            }

            if (result)
            {
                await Swal.FireAsync(
                    "Success",
                    $"The {submissionType} has been restored successfully.",
                    SweetAlertIcon.Success
                );
                await LoadArchivedSubmissions();
                selectedSubmission = null;
            }
            else
            {
                await Swal.FireAsync(
                    "Error",
                    $"Failed to restore {submissionType}. The item may have been deleted or you may not have permission.",
                    SweetAlertIcon.Error
                );
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error restoring submission {Id}", id);
            await Swal.FireAsync(
                "Error",
                "An unexpected error occurred while restoring the submission. Please try again or contact support if the problem persists.",
                SweetAlertIcon.Error
            );
        }
    }

    private string GetStatusBadgeClass(SubmissionStatus status) => status switch
    {
        SubmissionStatus.Resolved => "status-resolved",
        SubmissionStatus.Deleted => "status-deleted",
        _ => "status-pending"
    };

    private string GetPriorityBadgeClass(string priority) => priority?.ToLower() switch
    {
        "high" => "bg-danger text-white",
        "medium" => "bg-warning text-dark",
        "low" => "bg-success text-white",
        _ => "bg-secondary text-white"
    };

    private string GetStatusDisplay(SubmissionStatus status) => status switch
    {
        SubmissionStatus.Resolved => "Resolved",
        SubmissionStatus.Deleted => "Deleted",
        SubmissionStatus.Archived => "Archived",
        _ => status.ToString()
    };

    private int GetStartPage()
    {
        var start = currentPage - 2;
        return Math.Max(1, start);
    }

    private int GetEndPage()
    {
        var end = currentPage + 2;
        return Math.Min(TotalPages, end);
    }

    private async Task DeleteAllDeletedSubmissionsConfirmation()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Are you sure?",
            Text = "This will permanently delete all submissions with 'Deleted' status. This action cannot be undone!",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Yes, delete all",
            ConfirmButtonColor = "#dc3545",
            CancelButtonText = "Cancel",
            CancelButtonColor = "#6c757d"
        });

        if (result.IsConfirmed)
        {
            await DeleteAllDeletedSubmissions();
        }
    }

    private async Task DeleteAllDeletedSubmissions()
    {
        try
        {
            var deletedSubmissions = archivedSubmissions
                .Where(s => s.Status == SubmissionStatus.Deleted)
                .ToList();

            if (!deletedSubmissions.Any())
            {
                await Swal.FireAsync(
                    "Information",
                    "No deleted submissions found to remove.",
                    SweetAlertIcon.Info
                );
                return;
            }

            int successCount = 0;
            int failureCount = 0;
            
            foreach (var submission in deletedSubmissions)
            {
                bool result;
                if (submission.IsClientSubmission)
                {
                    // Use HTTP client directly for permanent deletion
                    var response = await Http.DeleteAsync($"api/submissions/{submission.Id}/permanent");
                    result = response.IsSuccessStatusCode;
                }
                else
                {
                    // Use HTTP client directly for permanent deletion
                    var response = await Http.DeleteAsync($"api/contact/{submission.Id}/permanent");
                    result = response.IsSuccessStatusCode;
                }

                if (result)
                {
                    successCount++;
                }
                else
                {
                    failureCount++;
                }
            }

            // Refresh the list
            await LoadArchivedSubmissions();

            // Show result message
            if (failureCount == 0)
            {
                await Swal.FireAsync(
                    "Success",
                    $"Successfully deleted {successCount} submissions permanently.",
                    SweetAlertIcon.Success
                );
            }
            else
            {
                await Swal.FireAsync(
                    "Warning",
                    $"Permanently deleted {successCount} submissions, but failed to delete {failureCount} submissions.",
                    SweetAlertIcon.Warning
                );
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting all deleted submissions");
            await Swal.FireAsync(
                "Error",
                "An unexpected error occurred while deleting submissions. Please try again or contact support.",
                SweetAlertIcon.Error
            );
        }
    }

    private async Task DeleteAllResolvedSubmissionsConfirmation()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Are you sure?",
            Text = "This will clean up all resolved submissions by permanently removing them. This action cannot be undone!",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Yes, clean up resolved",
            ConfirmButtonColor = "#ffc107",
            CancelButtonText = "Cancel",
            CancelButtonColor = "#6c757d"
        });

        if (result.IsConfirmed)
        {
            await DeleteAllResolvedSubmissions();
        }
    }

    private async Task DeleteAllResolvedSubmissions()
    {
        try
        {
            var resolvedSubmissions = archivedSubmissions
                .Where(s => s.Status == SubmissionStatus.Resolved)
                .ToList();

            if (!resolvedSubmissions.Any())
            {
                await Swal.FireAsync(
                    "Information",
                    "No resolved submissions found to clean up.",
                    SweetAlertIcon.Info
                );
                return;
            }

            int successCount = 0;
            int failureCount = 0;
            
            foreach (var submission in resolvedSubmissions)
            {
                bool result;
                if (submission.IsClientSubmission)
                {
                    var response = await Http.DeleteAsync($"api/submissions/{submission.Id}/permanent");
                    result = response.IsSuccessStatusCode;
                }
                else
                {
                    var response = await Http.DeleteAsync($"api/contact/{submission.Id}/permanent");
                    result = response.IsSuccessStatusCode;
                }

                if (result)
                {
                    successCount++;
                }
                else
                {
                    failureCount++;
                }
            }

            // Refresh the list
            await LoadArchivedSubmissions();

            // Show result message
            if (failureCount == 0)
            {
                await Swal.FireAsync(
                    "Success",
                    $"Successfully cleaned up {successCount} resolved submissions.",
                    SweetAlertIcon.Success
                );
            }
            else
            {
                await Swal.FireAsync(
                    "Warning",
                    $"Cleaned up {successCount} resolved submissions, but failed to clean up {failureCount} submissions.",
                    SweetAlertIcon.Warning
                );
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error cleaning up resolved submissions");
            await Swal.FireAsync(
                "Error",
                "An unexpected error occurred while cleaning up resolved submissions. Please try again or contact support.",
                SweetAlertIcon.Error
            );
        }
    }
}