@page "/client/dashboard"
@using BlazorApp1.Shared
@using BlazorApp1.Shared.Models
@using BlazorApp1.Client.Services
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using CurrieTechnologies.Razor.SweetAlert2
@attribute [Authorize(Roles = "Client")]
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IBillingService BillingService
@inject IJSRuntime JSRuntime
@inject SweetAlertService swal

<PageTitle>Homeowner Dashboard</PageTitle>

<div class="container-fluid py-4">
    <!-- Admin Navigation Section -->
    @if (isAdminOrSuperAdmin)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-body p-3">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-shield-lock text-primary me-2"></i>
                            <h6 class="mb-0">Admin Navigation</h6>
                        </div>
                        <div class="mt-3">
                            <button class="btn btn-outline-primary me-2" @onclick="NavigateToAdmin">
                                <i class="bi bi-speedometer2 me-2"></i>Admin Dashboard
                            </button>
                            @if (isSuperAdmin)
                            {
                                <button class="btn btn-outline-danger" @onclick="NavigateToSuperAdmin">
                                    <i class="bi bi-shield-check me-2"></i>Super Admin Dashboard
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Balance Summary Section -->
    <div class="row">
        <div class="col-md-6">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-body p-4">
                    <h5 class="card-title mb-4">
                        <i class="bi bi-wallet2 text-primary me-2"></i>
                        Balance Summary
                    </h5>
                    <div class="balance-info p-4 rounded">
                        <div class="mb-4">
                            <label class="text-muted mb-2">Current Balance</label>
                            <h2 class="text-danger mb-0">₱@CalculateCurrentBalance().ToString("N2")</h2>
                        </div>
                        <div class="mb-4">
                            <label class="text-muted mb-2">Previous Payment</label>
                            <div class="d-flex align-items-center">
                                <h5 class="text-success mb-0">₱@GetPreviousPayment().ToString("N2")</h5>
                                <span class="badge bg-info ms-2">@(GetPreviousPaymentDate()?.ToString("MMMM dd, yyyy") ?? "No previous payment")</span>
                            </div>
                        </div>
                        <div class="mb-4">
                            <label class="text-muted mb-2">Payment Difference</label>
                            <div class="d-flex align-items-center">
                                <h5 class="@GetDifferenceClass() mb-0">₱@CalculatePaymentDifference().ToString("N2")</h5>
                                <span class="badge @GetDifferenceBadgeClass() ms-2">@GetDifferenceStatus()</span>
                            </div>
                        </div>
                    </div>
                    <div class="mt-3">
                        <small class="text-muted">
                            <i class="bi bi-info-circle me-1"></i>
                            Please visit the admin office for payment processing
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Billing History Section -->
        <div class="col-md-6">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-body p-4">
                    <h5 class="card-title mb-4">
                        <i class="bi bi-receipt text-primary me-2"></i>
                        Billing History
                    </h5>
                    @if (loadingBills)
                    {
                        <div class="text-center p-3">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (bills == null || !bills.Any())
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle me-2"></i>
                            @(errorMessage ?? "No billing history available.")
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th style="cursor: pointer;" @onclick="() => SortBills(nameof(BillingDto.BillDate))">
                                            Date Today
                                            @if (sortField == nameof(BillingDto.BillDate))
                                            {
                                                <i class="bi @(sortAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                            }
                                        </th>
                                        <th style="cursor: pointer;" @onclick="() => SortBills(nameof(BillingDto.BillType))">
                                            Bill Type
                                            @if (sortField == nameof(BillingDto.BillType))
                                            {
                                                <i class="bi @(sortAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                            }
                                        </th>
                                        <th>Description</th>
                                        <th>Amount</th>
                                        <th style="cursor: pointer;" @onclick="() => SortBills(nameof(BillingDto.DueDate))">
                                            Due Date
                                            @if (sortField == nameof(BillingDto.DueDate))
                                            {
                                                <i class="bi @(sortAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                            }
                                        </th>
                                        <th style="cursor: pointer;" @onclick="() => SortBills(nameof(BillingDto.Status))">
                                            Status
                                            @if (sortField == nameof(BillingDto.Status))
                                            {
                                                <i class="bi @(sortAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                            }
                                        </th>
                                        <th>OR Number</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var bill in GetSortedBills())
                                    {
                                        <tr class="@(bill.DueDate < DateTime.Today && !bill.IsPaid ? "table-danger" : "")">
                                            <td>@bill.BillDate.ToShortDateString()</td>
                                            <td>
                                                <span class="badge @GetBillTypeBadgeClass(bill.BillType)">
                                                    @bill.BillType
                                                </span>
                                            </td>
                                            <td>@bill.Description</td>
                                            <td>₱@bill.Amount.ToString("N2")</td>
                                            <td>@bill.DueDate.ToShortDateString()</td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(bill)">
                                                    @bill.Status
                                                </span>
                                            </td>
                                            <td>@(bill.ORNumber ?? "-")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Yearly and Monthly Summary Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-body p-4">
                    <h5 class="card-title mb-4">
                        <i class="bi bi-calendar-range text-primary me-2"></i>
                        Billing Trends
                    </h5>

                    <!-- Time Period Selector -->
                    <div class="filter-controls">
                        <div class="filter-group">
                            <div class="btn-group" role="group">
                                <button class="btn @(selectedPeriod == BillingPeriod.Yearly ? "btn-primary" : "btn-outline-primary")"
                                        @onclick="() => ChangePeriod(BillingPeriod.Yearly)">
                                    <i class="bi bi-calendar-year"></i>
                                    <span>Yearly</span>
                                </button>
                                <button class="btn @(selectedPeriod == BillingPeriod.Monthly ? "btn-primary" : "btn-outline-primary")"
                                        @onclick="() => ChangePeriod(BillingPeriod.Monthly)">
                                    <i class="bi bi-calendar-month"></i>
                                    <span>Monthly</span>
                                </button>
                            </div>
                            @if (selectedPeriod == BillingPeriod.Yearly)
                            {
                                <select class="form-select" @onchange="@(e => ChangeYear(int.Parse(e.Value?.ToString() ?? DateTime.Now.Year.ToString())))">
                                    @foreach (var year in GetAvailableYears())
                                    {
                                        <option value="@year" selected="@(year == selectedYear)">@year</option>
                                    }
                                </select>
                            }
                            else
                            {
                                <select class="form-select" @onchange="@(e => ChangeMonth(int.Parse(e.Value?.ToString() ?? DateTime.Now.Month.ToString())))">
                                    @for (int i = 1; i <= 12; i++)
                                    {
                                        <option value="@i" selected="@(i == selectedMonth)">@(new DateTime(2000, i, 1).ToString("MMMM"))</option>
                                    }
                                </select>
                                <select class="form-select" @onchange="@(e => ChangeYear(int.Parse(e.Value?.ToString() ?? DateTime.Now.Year.ToString())))">
                                    @foreach (var year in GetAvailableYears())
                                    {
                                        <option value="@year" selected="@(year == selectedYear)">@year</option>
                                    }
                                </select>
                            }
                        </div>
                        <button class="btn btn-info" @onclick="DownloadFilteredBills" disabled="@(!GetFilteredBills().Any())">
                            <i class="bi bi-download"></i>
                            <span>Download Bills</span>
                        </button>
                    </div>

                    <!-- Summary Cards -->
                    <div class="row mb-4">
                        <div class="col-md-3">
                            <div class="card border-0 bg-light">
                                <div class="card-body">
                                    <h6 class="text-muted">Total Bills</h6>
                                    <h3 class="mb-0">₱@GetTotalAmount().ToString("N2")</h3>
                                    <small class="text-muted">@GetBillCount() bills</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card border-0 bg-light">
                                <div class="card-body">
                                    <h6 class="text-muted">Paid Amount</h6>
                                    <h3 class="text-success mb-0">₱@GetPaidAmount().ToString("N2")</h3>
                                    <small class="text-muted">@GetPaidBillCount() paid bills</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card border-0 bg-light">
                                <div class="card-body">
                                    <h6 class="text-muted">Pending Amount</h6>
                                    <h3 class="text-warning mb-0">₱@GetPendingAmount().ToString("N2")</h3>
                                    <small class="text-muted">@GetPendingBillCount() pending bills</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card border-0 bg-light">
                                <div class="card-body">
                                    <h6 class="text-muted">Average Bill</h6>
                                    <h3 class="text-primary mb-0">₱@GetAverageBillAmount().ToString("N2")</h3>
                                    <small class="text-muted">per bill</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Bill Distribution by Type -->
                    <div class="row">
                        <div class="col-md-12">
                            <h6 class="text-muted mb-3">Bill Details</h6>
                            <div class="table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Bill Type</th>
                                            <th>Description</th>
                                            <th>Amount</th>
                                            <th>Bill Date</th>
                                            <th>Due Date</th>
                                            <th>Status</th>
                                            <th>OR Number</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            var filteredBills = GetFilteredBills().OrderByDescending(b => b.BillDate);
                                        }
                                        @foreach (var bill in filteredBills)
                                        {
                                            <tr>
                                                <td>
                                                    <span class="badge @GetBillTypeBadgeClass(bill.BillType)">
                                                        @bill.BillType
                                                    </span>
                                                </td>
                                                <td>@bill.Description</td>
                                                <td>₱@bill.Amount.ToString("N2")</td>
                                                <td>@bill.BillDate.ToShortDateString()</td>
                                                <td>@bill.DueDate.ToShortDateString()</td>
                                                <td>
                                                    <span class="badge @GetStatusBadgeClass(bill)">
                                                        @bill.Status
                                                    </span>
                                                </td>
                                                <td>@(bill.ORNumber ?? "-")</td>
                                            </tr>
                                        }
                                        @if (!filteredBills.Any())
                                        {
                                            <tr>
                                                <td colspan="6" class="text-center">
                                                    <div class="alert alert-info mb-0">
                                                        <i class="bi bi-info-circle me-2"></i>
                                                        No bills found for the selected period.
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    :root {
        --gold: #F7C748;
        --gold-light: #FFE17B;
        --gold-lighter: #FFF3D0;
        --gold-transparent: rgba(247, 199, 72, 0.1);
        --black: #2c2c2c;
        --white: #ffffff;
        --gray-100: #f8f9fa;
        --gray-200: #e9ecef;
        --gray-300: #dee2e6;
    }

    .container-fluid {
        padding: 2rem;
        background-color: var(--gray-100);
        min-height: 100vh;
    }

    .card {
        border: none;
        border-radius: 12px;
        background: var(--white);
        box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        margin-bottom: 1.5rem;
    }

    .card:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .card-body {
        padding: 1.5rem;
    }

    .card-title {
        color: var(--black);
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .balance-info {
        background: var(--white);
        border-radius: 8px;
        padding: 1.5rem;
        border: 1px solid var(--gray-200);
    }

    .text-primary {
        color: var(--gold) !important;
    }

    .btn-primary {
        background-color: var(--gold);
        border: none;
        color: var(--white);
        padding: 0.5rem 1.25rem;
        border-radius: 6px;
        transition: all 0.2s ease;
    }

    .btn-primary:hover {
        background-color: var(--gold-light);
        transform: translateY(-1px);
    }

    .btn-outline-primary {
        border: 1px solid var(--gold);
        color: var(--gold);
        background: transparent;
        padding: 0.5rem 1.25rem;
        border-radius: 6px;
        transition: all 0.2s ease;
    }

    .btn-outline-primary:hover {
        background-color: var(--gold);
        color: var(--white);
        transform: translateY(-1px);
    }

    .table {
        margin-bottom: 0;
    }

    .table th {
        background: var(--gray-100);
        color: var(--black);
        font-weight: 600;
        border-bottom: 2px solid var(--gray-200);
        padding: 1rem;
    }

    .table td {
        padding: 1rem;
        vertical-align: middle;
        border-bottom: 1px solid var(--gray-200);
    }

    .table tr:hover td {
        background-color: var(--gray-100);
    }

    .badge {
        padding: 0.5rem 0.75rem;
        border-radius: 6px;
        font-weight: 500;
    }

    .badge.bg-success {
        background-color: #28a745 !important;
    }

    .badge.bg-warning {
        background-color: #ffc107 !important;
        color: var(--black);
    }

    .badge.bg-danger {
        background-color: #dc3545 !important;
    }

    .badge.bg-info {
        background-color: #17a2b8 !important;
    }

    /* Bill Type Badges */
    .badge.water {
        background-color: #00bcd4;
        color: white;
    }

    .badge.monthly {
        background-color: var(--gold);
        color: var(--black);
    }

    /* Animations */
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .card {
        animation: fadeIn 0.3s ease-out;
    }

    /* Custom Scrollbar */
    ::-webkit-scrollbar {
        width: 6px;
    }

    ::-webkit-scrollbar-track {
        background: var(--gray-100);
    }

    ::-webkit-scrollbar-thumb {
        background: var(--gold);
        border-radius: 3px;
    }

    /* Alert Styling */
    .alert {
        border-radius: 8px;
        border: none;
        padding: 1rem;
    }

    .alert-info {
        background-color: var(--gold-transparent);
        color: var(--black);
        border-left: 4px solid var(--gold);
    }

    /* Enhanced Form Controls */
    .form-select {
        appearance: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        padding: 0.5rem 2rem 0.5rem 1rem;
        background-color: var(--white);
        border: 1px solid var(--gray-300);
        border-radius: 8px;
        cursor: pointer;
        font-size: 0.95rem;
        transition: all 0.2s ease;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'%3E%3Cpath fill='%23F7C748' d='M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 0.75rem center;
        background-size: 16px;
    }

    .form-select:hover {
        border-color: var(--gold);
        box-shadow: 0 0 0 2px var(--gold-transparent);
    }

    .form-select:focus {
        outline: none;
        border-color: var(--gold);
        box-shadow: 0 0 0 3px var(--gold-transparent);
    }

    /* Time Period Selector Enhancement */
    .btn-group {
        display: inline-flex;
        background-color: var(--white);
        border-radius: 8px;
        padding: 0.25rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        gap: 0.25rem;
    }

    .btn-group .btn {
        border-radius: 6px;
        padding: 0.5rem 1.25rem;
        font-size: 0.95rem;
        border: none;
        white-space: nowrap;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        min-width: 120px;
        transition: all 0.2s ease;
    }

    .btn-group .btn-primary {
        background-color: var(--gold);
        color: var(--black);
        font-weight: 500;
    }

    .btn-group .btn-outline-primary {
        color: var(--black);
        background-color: transparent;
        font-weight: 500;
    }

    .btn-group .btn-outline-primary:hover {
        background-color: var(--gold-transparent);
        color: var(--black);
    }

    .btn-group .btn i {
        margin-right: 0.5rem;
        font-size: 1rem;
    }

    /* Filter Controls Container */
    .filter-controls {
        display: flex;
        align-items: center;
        justify-content: space-between;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 1.5rem;
        padding: 1rem;
        background-color: var(--white);
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .filter-group {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        flex-wrap: nowrap;
    }

    /* Responsive Adjustments */
    @@media (max-width: 768px) {
        .filter-controls {
            flex-direction: column;
            align-items: stretch;
            padding: 0.75rem;
        }

        .filter-group {
            flex-direction: column;
            align-items: stretch;
        }

        .btn-group {
            width: 100%;
            display: flex;
        }

        .btn-group .btn {
            flex: 1;
            min-width: auto;
            padding: 0.5rem 1rem;
        }
    }

    /* Summary Cards */
    .summary-card {
        background: var(--white);
        border-radius: 8px;
        padding: 1.5rem;
        height: 100%;
    }

    .summary-card h3 {
        color: var(--black);
        margin-bottom: 0.5rem;
    }

    .summary-card .text-muted {
        color: #6c757d !important;
    }

    /* Loading Spinner */
    .spinner-border {
        color: var(--gold) !important;
    }

    /* Icon Animations */
    .bi {
        transition: transform 0.3s ease;
    }

    .card:hover .bi {
        transform: scale(1.2);
        color: var(--gold);
    }

    .btn:hover .bi {
        animation: wiggle 0.5s ease;
    }

    /* Enhanced Card Animations */
    .card {
        animation: fadeIn 0.3s ease-out;
        transition: transform 0.3s ease, box-shadow 0.3s ease, background-color 0.3s ease;
        background: linear-gradient(145deg, var(--white), var(--gold-lighter));
    }

    .card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 20px rgba(247, 199, 72, 0.15);
        background: linear-gradient(145deg, var(--white), var(--gold-transparent));
    }

    /* Balance Info Animations */
    .balance-info {
        position: relative;
        overflow: hidden;
        animation: slideIn 0.5s ease-out;
    }

    .balance-info::after {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(
            90deg,
            transparent,
            rgba(247, 199, 72, 0.1),
            transparent
        );
        animation: shimmer 2s infinite;
    }

    /* Badge Animations */
    .badge {
        transition: all 0.3s ease;
    }

    .badge:hover {
        transform: scale(1.05);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    /* Table Row Animations */
    .table tr {
        transition: transform 0.2s ease, background-color 0.2s ease;
    }

    .table tr:hover {
        transform: translateX(5px);
        background-color: var(--gold-transparent);
    }

    /* Button Animations */
    .btn {
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .btn::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 0;
        height: 0;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        transform: translate(-50%, -50%);
        transition: width 0.3s, height 0.3s;
    }

    .btn:active::after {
        width: 200px;
        height: 200px;
        opacity: 0;
    }

    /* Loading Spinner Animation */
    .spinner-border {
        color: var(--gold) !important;
        animation: spin 1s linear infinite, pulse 1s ease-in-out infinite;
    }

    /* Animation Keyframes */
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateX(-20px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @@keyframes shimmer {
        0% {
            left: -100%;
        }
        100% {
            left: 100%;
        }
    }

    @@keyframes wiggle {
        0%, 100% { transform: rotate(0deg); }
        25% { transform: rotate(-10deg); }
        75% { transform: rotate(10deg); }
    }

    @@keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.1); }
        100% { transform: scale(1); }
    }

    @@keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }

    /* Summary Cards Enhancement */
    .summary-card {
        background: linear-gradient(145deg, var(--white), var(--gold-lighter));
        transition: all 0.3s ease;
    }

    .summary-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 15px rgba(247, 199, 72, 0.2);
    }

    /* Alert Enhancements */
    .alert {
        animation: slideIn 0.3s ease-out;
        border-left: 4px solid var(--gold);
        background: linear-gradient(145deg, var(--white), var(--gold-lighter));
    }

    /* Status Badge Colors */
    .badge.bg-success {
        background-color: #4CAF50 !important;
        transition: all 0.3s ease;
    }

    .badge.bg-warning {
        background-color: var(--gold) !important;
        color: var(--black);
    }

    .badge.water {
        background-color: #00BCD4;
        color: white;
    }

    .badge.monthly {
        background-color: var(--gold-light);
        color: var(--black);
    }
</style>

@code {
    private bool isAdminOrSuperAdmin;
    private bool isSuperAdmin;
    private List<BillingDto>? bills;
    private bool loadingBills = true;
    private int userId;
    private string? errorMessage;
    private string sortField = nameof(BillingDto.BillDate);
    private bool sortAscending = false;

    private enum BillingPeriod
    {
        Yearly,
        Monthly
    }

    private BillingPeriod selectedPeriod = BillingPeriod.Monthly;
    private int selectedYear = DateTime.Now.Year;
    private int selectedMonth = DateTime.Now.Month;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            isAdminOrSuperAdmin = user.IsInRole("Admin") || user.IsInRole("SuperAdmin");
            isSuperAdmin = user.IsInRole("SuperAdmin");

            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
            if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int id))
            {
                userId = id;
                await LoadBillingHistory();
            }
            else
            {
                errorMessage = "Unable to determine user ID. Please try logging out and back in.";
                Console.WriteLine("User ID claim not found or invalid");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while initializing the dashboard.";
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
        }
    }

    private async Task LoadBillingHistory()
    {
        try
        {
            loadingBills = true;
            errorMessage = null;
            Console.WriteLine($"Loading bills for user ID: {userId}");
            
            var response = await BillingService.GetUserBillsAsync(userId.ToString());
            Console.WriteLine($"Response success: {response.IsSuccess}, Message: {response.Message}");
            
            if (response.IsSuccess && response.Data != null)
            {
                bills = response.Data;
                Console.WriteLine($"Loaded {bills.Count} bills");
            }
            else
            {
                errorMessage = response.Message ?? "Failed to load billing history.";
                Console.WriteLine($"Failed to load bills: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while loading the billing history.";
            Console.WriteLine($"Error loading bills: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
        finally
        {
            loadingBills = false;
            StateHasChanged();
        }
    }

    private void SortBills(string field)
    {
        if (sortField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortField = field;
            sortAscending = true;
        }
        StateHasChanged();
    }

    private IEnumerable<BillingDto> GetSortedBills()
    {
        if (bills == null) return Enumerable.Empty<BillingDto>();

        var query = bills.AsEnumerable();

        query = sortField switch
        {
            nameof(BillingDto.BillDate) => sortAscending 
                ? query.OrderBy(b => b.BillDate)
                : query.OrderByDescending(b => b.BillDate),
            nameof(BillingDto.BillType) => sortAscending
                ? query.OrderBy(b => b.BillType)
                : query.OrderByDescending(b => b.BillType),
            nameof(BillingDto.Amount) => sortAscending
                ? query.OrderBy(b => b.Amount)
                : query.OrderByDescending(b => b.Amount),
            nameof(BillingDto.DueDate) => sortAscending
                ? query.OrderBy(b => b.DueDate)
                : query.OrderByDescending(b => b.DueDate),
            nameof(BillingDto.Status) => sortAscending
                ? query.OrderBy(b => b.Status)
                : query.OrderByDescending(b => b.Status),
            _ => query.OrderByDescending(b => b.BillDate)
        };

        return query;
    }

    private decimal CalculateCurrentBalance()
    {
        if (bills == null || !bills.Any()) return 0;

        return bills
            .Where(b => !b.IsPaid)
            .Sum(b => b.Amount);
    }

    private DateTime? GetNextDueDate()
    {
        if (bills == null || !bills.Any()) return null;

        return bills
            .Where(b => !b.IsPaid && b.DueDate >= DateTime.Today)
            .OrderBy(b => b.DueDate)
            .Select(b => b.DueDate)
            .FirstOrDefault();
    }

    private DateTime? GetPreviousDueDate()
    {
        if (bills == null || !bills.Any()) return null;

        return bills
            .Where(b => b.DueDate < DateTime.Today)
            .OrderByDescending(b => b.DueDate)
            .Select(b => b.DueDate)
            .FirstOrDefault();
    }

    private bool IsPreviousDuePaid()
    {
        var previousDueDate = GetPreviousDueDate();
        if (previousDueDate == null) return false;

        var previousBill = bills?
            .Where(b => b.DueDate == previousDueDate)
            .FirstOrDefault();

        return previousBill?.IsPaid ?? false;
    }

    private decimal GetPreviousPayment()
    {
        if (bills == null || !bills.Any()) return 0;

        var previousPaidBill = bills
            .Where(b => b.IsPaid)
            .OrderByDescending(b => b.PaymentDate)
            .FirstOrDefault();

        return previousPaidBill?.Amount ?? 0;
    }

    private DateTime? GetPreviousPaymentDate()
    {
        if (bills == null || !bills.Any()) return null;

        var previousPaidBill = bills
            .Where(b => b.IsPaid)
            .OrderByDescending(b => b.PaymentDate)
            .FirstOrDefault();

        return previousPaidBill?.PaymentDate;
    }

    private decimal CalculatePaymentDifference()
    {
        var currentBalance = CalculateCurrentBalance();
        var previousPayment = GetPreviousPayment();
        return currentBalance - previousPayment;
    }

    private string GetDifferenceClass()
    {
        var difference = CalculatePaymentDifference();
        return difference switch
        {
            > 0 => "text-danger",
            < 0 => "text-success",
            _ => "text-warning"
        };
    }

    private string GetDifferenceBadgeClass()
    {
        var difference = CalculatePaymentDifference();
        return difference switch
        {
            > 0 => "bg-danger",
            < 0 => "bg-success",
            _ => "bg-warning"
        };
    }

    private string GetDifferenceStatus()
    {
        var difference = CalculatePaymentDifference();
        return difference switch
        {
            > 0 => "Increase",
            < 0 => "Decrease",
            _ => "No Change"
        };
    }

    private string GetStatusBadgeClass(BillingDto bill)
    {
        return bill.Status?.ToLower() switch
        {
            "paid" => "bg-success",
            "pending" => "bg-warning",
            "overdue" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "paid" => "bg-success",
            "pending" => "bg-warning",
            "overdue" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private void NavigateToAdmin()
    {
        NavigationManager.NavigateTo("/admin");
    }

    private void NavigateToSuperAdmin()
    {
        NavigationManager.NavigateTo("/superadmin");
    }

    private void ChangePeriod(BillingPeriod period)
    {
        selectedPeriod = period;
        StateHasChanged();
    }

    private void ChangeYear(int year)
    {
        selectedYear = year;
        StateHasChanged();
    }

    private void ChangeMonth(int month)
    {
        selectedMonth = month;
        StateHasChanged();
    }

    private IEnumerable<int> GetAvailableYears()
    {
        if (bills == null || !bills.Any())
            return new[] { DateTime.Now.Year };

        var years = bills
            .Select(b => b.BillDate.Year)
            .Distinct()
            .OrderByDescending(y => y)
            .ToList();

        if (!years.Contains(DateTime.Now.Year))
            years.Insert(0, DateTime.Now.Year);

        return years;
    }

    private IEnumerable<BillingDto> GetFilteredBills()
    {
        if (bills == null) return Enumerable.Empty<BillingDto>();

        var query = bills.AsEnumerable();

        if (selectedPeriod == BillingPeriod.Yearly)
        {
            query = query.Where(b => b.BillDate.Year == selectedYear);
        }
        else
        {
            query = query.Where(b => b.BillDate.Year == selectedYear && b.BillDate.Month == selectedMonth);
        }

        return query;
    }

    private decimal GetTotalAmount() => GetFilteredBills().Sum(b => b.Amount);
    private int GetBillCount() => GetFilteredBills().Count();
    private decimal GetPaidAmount() => GetFilteredBills().Where(b => b.IsPaid).Sum(b => b.Amount);
    private int GetPaidBillCount() => GetFilteredBills().Count(b => b.IsPaid);
    private decimal GetPendingAmount() => GetFilteredBills().Where(b => !b.IsPaid).Sum(b => b.Amount);
    private int GetPendingBillCount() => GetFilteredBills().Count(b => !b.IsPaid);
    private decimal GetAverageBillAmount()
    {
        var bills = GetFilteredBills();
        return bills.Any() ? bills.Average(b => b.Amount) : 0;
    }

    private class PeriodBillTypeSummary
    {
        public string BillType { get; set; } = "";
        public int Count { get; set; }
        public decimal TotalAmount { get; set; }
        public decimal AverageAmount => Count > 0 ? TotalAmount / Count : 0;
        public int PaidCount { get; set; }
    }

    private IEnumerable<PeriodBillTypeSummary> GetPeriodBillTypeSummary()
    {
        return Enumerable.Empty<PeriodBillTypeSummary>();
    }

    private string GetBillTypeBadgeClass(string billType)
    {
        return billType?.ToLower() switch
        {
            "water" => "bg-info",
            "necessities" => "bg-primary",
            "emergency" => "bg-danger",
            "maintenance" => "bg-warning",
            _ => "bg-secondary"
        };
    }

    private string GetBillTypeDescription(string billType)
    {
        return billType?.ToLower() switch
        {
            "water" => "Monthly water consumption charges",
            "necessities" => "Essential household expenses and utilities",
            "emergency" => "Urgent or unexpected expenses",
            "maintenance" => "Property maintenance and repairs",
            _ => "Other miscellaneous expenses"
        };
    }

    private BillingDto GetLatestBillByType(string billType)
    {
        return bills?
            .Where(b => b.BillType == billType)
            .OrderByDescending(b => b.BillDate)
            .FirstOrDefault();
    }

    private async Task DownloadFilteredBills()
    {
        try
        {
            var filteredBills = GetFilteredBills();
            if (!filteredBills.Any())
            {
                return;
            }

            var periodName = selectedPeriod == BillingPeriod.Yearly
                ? $"{selectedYear}"
                : $"{new DateTime(2000, selectedMonth, 1).ToString("MMMM")}_{selectedYear}";

            var fileBytes = await BillingService.DownloadBillsAsync(userId.ToString());
            var fileName = $"bills_{periodName}.zip";
            
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", 
                Convert.ToBase64String(fileBytes), 
                "application/zip", 
                fileName);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading bills: {ex.Message}");
            await swal.FireAsync("Error", "An error occurred while downloading the bills", SweetAlertIcon.Error);
        }
    }
}
