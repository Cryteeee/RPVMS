@using BlazorApp1.Client.Auth
@using BlazorApp1.Client.Services
@using BlazorApp1.Client.Shared.Providers
@using BlazorApp1.Shared
@using BlazorApp1.Shared.Enums
@using System.Security.Claims
@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorageService
@inject IAccountService AccountService
@inject ProfileStateService ProfileState
@inject ProfilePhotoService ProfilePhotoService
@inject INotificationService NotificationService
@implements IDisposable

<style>
    .sidebar {
        background: white;
        color: #000;
        height: calc(100vh - 40px);
        width: 280px;
        position: fixed;
        top: 0;
        left: 20px;
        margin-top: 20px;
        margin-bottom: 20px;
        border-radius: 16px;
        overflow: visible;
        z-index: 1;
        display: flex;
        flex-direction: column;
        box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        transition: all 0.3s ease;
    }

    .sidebar.collapsed {
        width: 90px;
    }

    .toggle-button {
        position: absolute;
        top: 20px;
        right: -18px;
        width: 36px;
        height: 36px;
        background: #FFC107;
        border: 2px solid white;
        border-radius: 50%;
        color: #000;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        z-index: 1000;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        transition: transform 0.3s ease;
    }

    .toggle-button:hover {
        background: #ffca2c;
        transform: scale(1.1);
    }

    .toggle-button i {
        font-size: 18px;
        transition: transform 0.3s ease;
        text-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }

    .sidebar.collapsed .toggle-button i {
        transform: rotate(180deg);
    }

    .header {
        padding: 1.5rem;
        display: flex;
        align-items: center;
        gap: 1rem;
        background: #FFC107;
        border-bottom: 1px solid rgba(0,0,0,0.1);
        height: 80px;
        position: relative;
        overflow: visible;
        transition: all 0.3s ease;
        z-index: 2;
    }

    .sidebar.collapsed .header {
        padding: 1.5rem 1rem;
    }

    .header-icon {
        font-size: 1.5rem;
        color: #000;
        text-shadow: 0 1px 2px rgba(0,0,0,0.1);
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: transform 0.5s ease;
        position: relative;
    }

    .header-icon:hover {
        animation: none; /* Remove the default spin animation */
    }

    /* Add specific animation for gear icon when in admin/superadmin role */
    .header-icon.bi-gear-fill {
        animation: gearSpin 4s linear infinite;
    }

    .header-icon.bi-gear-fill:hover {
        animation: gearSpinFast 1s linear infinite;
    }

    @@keyframes gearSpin {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }

    @@keyframes gearSpinFast {
        0% {
            transform: rotate(0deg) scale(1.1);
        }
        100% {
            transform: rotate(360deg) scale(1.1);
        }
    }

    /* Add specific animation for home icon when in client role */
    .header-icon.bi-house-fill {
        animation: homeFloat 3s ease-in-out infinite;
    }

    .header-icon.bi-house-fill:hover {
        animation: homeFloatFast 1.5s ease-in-out infinite;
    }

    @@keyframes homeFloat {
        0%, 100% {
            transform: translateY(0) scale(1);
            text-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        50% {
            transform: translateY(-3px) scale(1.05);
            text-shadow: 0 6px 8px rgba(0,0,0,0.2), 0 0 15px rgba(255, 193, 7, 0.4);
        }
    }

    @@keyframes homeFloatFast {
        0%, 100% {
            transform: translateY(0) scale(1.1);
            text-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        50% {
            transform: translateY(-5px) scale(1.2);
            text-shadow: 0 8px 12px rgba(0,0,0,0.3), 0 0 20px rgba(255, 193, 7, 0.6);
        }
    }

    .header-title {
        font-size: 1.25rem;
        font-weight: 700;
        color: #000;
        margin: 0;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        text-shadow: 0 1px 2px rgba(0,0,0,0.1);
        transition: opacity 0.3s ease;
    }

    .sidebar.collapsed .header-title {
        opacity: 0;
        width: 0;
    }

    .nav-content {
        flex: 1;
        overflow-y: auto;
        overflow-x: hidden;
        padding: 1.5rem 1rem;
        margin-bottom: 1rem;
        position: relative;
        z-index: 1;
    }

    .nav-section {
        margin-bottom: 2rem;
    }

    .nav-section-header {
        color: #000000;
        font-size: 0.9rem;
        font-weight: 800;
        text-transform: uppercase;
        letter-spacing: 1.2px;
        margin: 0 0.5rem 1rem;
        padding: 0.5rem 1rem;
        border-bottom: 3px solid #FFC107;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        background: rgba(255, 193, 7, 0.1);
        border-radius: 6px;
    }

    .nav-item {
        margin-bottom: 0.75rem;
        position: relative;
    }

    .nav-link {
        color: black;
        text-decoration: none;
        font-size: 1rem;
        font-weight: 500;
        padding: 0.5rem 0.75rem;
        border-radius: 8px;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .nav-link:hover {
        background: rgba(255, 193, 7, 0.15);
        color: #000000;
        transform: translateX(4px);
        box-shadow: 0 4px 8px rgba(255, 193, 7, 0.25);
    }

    .nav-link.active {
        background: #FFC107;
        color: #000000;
        font-weight: 700;
        box-shadow: 0 4px 12px rgba(255, 193, 7, 0.3);
        position: relative;
    }

    .nav-link.active::before {
        content: '';
        position: absolute;
        left: -10px;
        top: 50%;
        transform: translateY(-50%);
        width: 4px;
        height: 70%;
        background: #FFC107;
        border-radius: 0 4px 4px 0;
    }

    .nav-link i {
        font-size: 1.4rem;
        color: #000000;
        width: 32px;
        text-align: center;
        transition: all 0.3s ease;
        filter: drop-shadow(0 1px 2px rgba(0,0,0,0.1));
        transform-origin: center;
    }

    /* Dashboard Icon Animation */
    .nav-link:hover i.bi-speedometer2 {
        animation: dashboardSpin 1.2s ease-in-out;
    }

    @@keyframes dashboardSpin {
        0% { transform: rotate(0deg) scale(1); }
        50% { transform: rotate(180deg) scale(1.2); }
        100% { transform: rotate(360deg) scale(1); }
    }

    /* User Management Icon Animation */
    .nav-link:hover i.bi-people {
        animation: peopleWave 0.8s ease-in-out;
    }

    @@keyframes peopleWave {
        0% { transform: translateY(0) scale(1); }
        25% { transform: translateY(-4px) scale(1.1); }
        50% { transform: translateY(2px) scale(1.1); }
        75% { transform: translateY(-2px) scale(1.05); }
        100% { transform: translateY(0) scale(1); }
    }

    /* Homeowners Icon Animation */
    .nav-link:hover i.bi-houses {
        animation: houseBounce 0.8s cubic-bezier(0.36, 0, 0.66, -0.56);
    }

    @@keyframes houseBounce {
        0% { transform: translateY(0) scale(1); }
        50% { transform: translateY(-5px) scale(1.15); }
        75% { transform: translateY(2px) scale(0.95); }
        100% { transform: translateY(0) scale(1); }
    }

    /* Event Planning Icon Animation */
    .nav-link:hover i.fas.fa-calendar {
        animation: calendarPop 0.8s ease-in-out;
    }

    @@keyframes calendarPop {
        0% { transform: scale(1) rotate(0deg); }
        25% { transform: scale(1.2) rotate(-5deg); }
        50% { transform: scale(1.1) rotate(5deg); }
        75% { transform: scale(1.15) rotate(-3deg); }
        100% { transform: scale(1) rotate(0deg); }
    }

    /* Concern and Request Icon Animation */
    .nav-link:hover i.bi-receipt {
        animation: receiptWave 0.8s ease-in-out;
    }

    @@keyframes receiptWave {
        0% { transform: translateX(0) rotate(0deg); }
        25% { transform: translateX(-3px) rotate(-5deg); }
        50% { transform: translateX(3px) rotate(5deg); }
        75% { transform: translateX(-2px) rotate(-3deg); }
        100% { transform: translateX(0) rotate(0deg); }
    }

    /* Active Concerns Icon Animation */
    .nav-link:hover i.bi-list-check {
        animation: checkList 0.8s ease-in-out;
    }

    @@keyframes checkList {
        0% { transform: translateX(0); }
        25% { transform: translateX(3px) scale(1.1); }
        50% { transform: translateX(-2px) scale(1.1); }
        75% { transform: translateX(1px) scale(1.05); }
        100% { transform: translateX(0) scale(1); }
    }

    /* Archive Icon Animation */
    .nav-link:hover i.bi-archive {
        animation: archivePop 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    }

    @@keyframes archivePop {
        0% { transform: translateY(0) scale(1); }
        50% { transform: translateY(-4px) scale(1.2); }
        75% { transform: translateY(2px) scale(0.9); }
        100% { transform: translateY(0) scale(1); }
    }

    /* Board Messages Icon Animation */
    .nav-link:hover i.bi-chat-square-text {
        animation: messageFloat 0.8s ease-in-out;
    }

    @@keyframes messageFloat {
        0% { transform: scale(1) rotate(0deg); }
        25% { transform: scale(1.15) rotate(5deg); }
        50% { transform: scale(1.1) rotate(-5deg); }
        75% { transform: scale(1.05) rotate(3deg); }
        100% { transform: scale(1) rotate(0deg); }
    }

    /* Client Management Icon Animation */
    .nav-link:hover i.bi-person-workspace {
        animation: workspaceRotate 0.8s ease-in-out;
    }

    @@keyframes workspaceRotate {
        0% { transform: scale(1) rotate(0deg); }
        50% { transform: scale(1.15) rotate(10deg); }
        100% { transform: scale(1) rotate(0deg); }
    }

    .nav-link.active i {
        color: #000;
        animation: none;
        transform: scale(1.1);
    }

    .nav-link span {
        color: #000000;
        font-weight: 700;
        transition: all 0.3s ease;
    }

    .nav-link:hover span {
        transform: translateX(2px);
    }

    .sidebar.collapsed .nav-link span,
    .sidebar.collapsed .nav-section-header,
    .sidebar.collapsed .user-info {
        opacity: 0;
        width: 0;
        display: none;
    }

    .sidebar.collapsed .nav-link {
        padding: 1rem;
        justify-content: center;
    }

    .sidebar.collapsed .nav-content {
        padding: 1.5rem 0.75rem;
    }

    .notification-button {
        position: relative;
        background: transparent;
        border: none;
        padding: 8px;
        border-radius: 50%;
        cursor: pointer;
        transition: all 0.2s ease;
        margin-left: 1rem;
    }

    .notification-badge {
        position: absolute;
        top: -4px;
        right: -4px;
        background: linear-gradient(135deg, #dc3545, #c82333);
        color: white;
        border-radius: 12px;
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
        font-weight: 600;
        min-width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 2px 8px rgba(220, 53, 69, 0.3);
    }

    .notification-modal {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 380px;
        max-height: 80vh;
        background: white;
        border-radius: 16px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
        z-index: 9999;
        overflow: hidden;
        animation: modalFadeIn 0.3s ease;
        display: flex;
        flex-direction: column;
    }

    .notification-modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.25rem 1.5rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.08);
        background: white;
    }

    .notification-modal-header h6 {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2d3748;
        margin: 0;
    }

    .notification-modal-header .btn-close {
        padding: 0.5rem;
        margin: -0.5rem -0.5rem -0.5rem auto;
    }

    .notification-modal-header .btn-link {
        color: #6366f1;
        font-size: 0.875rem;
        padding: 0.25rem 0.5rem;
        margin: -0.25rem 0;
    }

    .notification-modal-body {
        flex: 1;
        overflow-y: auto;
        padding: 0;
        max-height: calc(80vh - 140px);
    }

    .notification-list {
        padding: 0;
    }

    .notification-item {
        padding: 1.25rem 1.5rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        transition: all 0.2s ease;
        cursor: pointer;
        background: white;
    }

    .notification-item:hover {
        background-color: rgba(99, 102, 241, 0.05);
    }

    .notification-item:last-child {
        border-bottom: none;
    }

    .notification-content {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .notification-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 1rem;
    }

    .notification-header .d-flex {
        flex: 1;
        min-width: 0;
    }

    .notification-header strong {
        display: block;
        color: #1a202c;
        font-size: 0.95rem;
        margin-bottom: 0.25rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .notification-header .badge {
        padding: 0.35rem 0.65rem;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.025em;
    }

    .notification-message {
        margin: 0;
        font-size: 0.925rem;
        color: #4a5568;
        line-height: 1.5;
        white-space: pre-line;
        padding: 0.5rem 0;
    }

    .notification-message span {
        display: inline-block;
        margin-bottom: 0.25rem;
    }

    .notification-message br {
        content: "";
        display: block;
        margin: 0.25rem 0;
    }

    .notification-modal-footer {
        padding: 1rem 1.5rem;
        border-top: 1px solid rgba(0, 0, 0, 0.08);
        background: white;
    }

    .notification-modal-footer .btn-link {
        color: #6366f1;
        font-weight: 500;
        font-size: 0.95rem;
        padding: 0.5rem;
        border-radius: 8px;
        transition: all 0.2s ease;
    }

    .notification-modal-footer .btn-link:hover {
        color: #4f46e5;
        text-decoration: none;
        background-color: rgba(99, 102, 241, 0.05);
    }

    .avatar-circle {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        overflow: hidden;
        background-color: #f8f9fa;
        border: 2px solid rgba(0, 0, 0, 0.1);
        flex-shrink: 0;
    }

    .avatar-circle img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .text-center.text-muted {
        padding: 3rem 1.5rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 1rem;
    }

    .text-center.text-muted i {
        font-size: 2.5rem;
        color: #cbd5e0;
    }

    .text-center.text-muted p {
        color: #718096;
        font-size: 1rem;
        margin: 0;
    }

    /* Custom scrollbar */
    .notification-modal-body::-webkit-scrollbar {
        width: 6px;
    }

    .notification-modal-body::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    .notification-modal-body::-webkit-scrollbar-thumb {
        background: #cbd5e0;
        border-radius: 3px;
    }

    .notification-modal-body::-webkit-scrollbar-thumb:hover {
        background: #a0aec0;
    }

    /* Responsive styles */
    @@media (max-width: 480px) {
        .notification-modal {
            width: 90%;
            max-width: 380px;
            max-height: 90vh;
            margin: 0 auto;
        }

        .notification-modal-body {
            max-height: calc(90vh - 140px);
        }

        .notification-item {
            padding: 1rem;
        }

        .notification-header {
            flex-direction: column;
            gap: 0.5rem;
        }

        .notification-header .d-flex {
            width: 100%;
        }

        .notification-header small {
            align-self: flex-start;
        }
    }

    .user-profile {
        position: relative;
        display:flex;
        align-items:center;
        justify-content:space-between;
        flex-wrap:wrap;
        margin-top: auto;
        gap:1rem;
        padding: 1rem;
        border-top: 1px solid rgba(0, 0, 0, 0.1);
        background: linear-gradient(135deg, #CD7F32, #B87333); /* Bronze gradient */
        border-radius: 0 0 16px 16px;
        transition: all 0.3s ease;
        box-shadow: 0 0 15px rgba(205, 127, 50, 0.4);
        animation: bronzeGlow 2s infinite;
        z-index: 1000;
    }

    @@media (max-width: 768px) {
    .user-profile {
        flex-direction: column;
        align-items: stretch;
    }
    
    .user-profile-content {
        width: 100%;
        justify-content: center;
    }
    
    .profile-dropdown {
        width: 100%;
    }
}

    .user-profile.superadmin {
        background: linear-gradient(135deg, #FFD700, #FFA500); /* Gold gradient */
        box-shadow: 0 0 20px rgba(255, 215, 0, 0.6),
                   0 0 30px rgba(255, 215, 0, 0.4),
                   0 0 40px rgba(255, 215, 0, 0.2);
        animation: goldGlow 2s infinite;
    }

    .user-profile.admin {
        background: linear-gradient(135deg, #C0C0C0, #A9A9A9); /* Silver gradient */
        box-shadow: 0 0 20px rgba(192, 192, 192, 0.6),
                   0 0 30px rgba(192, 192, 192, 0.4),
                   0 0 40px rgba(192, 192, 192, 0.2);
        animation: silverGlow 2s infinite;
    }

    .user-profile.client {
        background: linear-gradient(135deg, #FFFFFF, #F8F9FA); /* White gradient */
        box-shadow: 0 0 20px rgba(255, 255, 255, 0.6),
                   0 0 30px rgba(255, 255, 255, 0.4),
                   0 0 40px rgba(255, 255, 255, 0.2);
        animation: whiteGlow 2s infinite;
    }

    @@keyframes goldGlow {
        0% {
            box-shadow: 0 0 20px rgba(255, 215, 0, 0.6);
            transform: scale(1);
        }
        50% {
            box-shadow: 0 0 30px rgba(255, 215, 0, 0.8),
                       0 0 40px rgba(255, 215, 0, 0.4),
                       0 0 50px rgba(255, 215, 0, 0.2);
            transform: scale(1.02);
        }
        100% {
            box-shadow: 0 0 20px rgba(255, 215, 0, 0.6);
            transform: scale(1);
        }
    }

    @@keyframes silverGlow {
        0% {
            box-shadow: 0 0 20px rgba(192, 192, 192, 0.6);
            transform: scale(1);
        }
        50% {
            box-shadow: 0 0 30px rgba(192, 192, 192, 0.8),
                       0 0 40px rgba(192, 192, 192, 0.4),
                       0 0 50px rgba(192, 192, 192, 0.2);
            transform: scale(1.02);
        }
        100% {
            box-shadow: 0 0 20px rgba(192, 192, 192, 0.6);
            transform: scale(1);
        }
    }

    @@keyframes bronzeGlow {
        0% {
            box-shadow: 0 0 15px rgba(205, 127, 50, 0.4);
            transform: scale(1);
        }
        50% {
            box-shadow: 0 0 25px rgba(205, 127, 50, 0.6),
                       0 0 35px rgba(205, 127, 50, 0.3),
                       0 0 45px rgba(205, 127, 50, 0.1);
            transform: scale(1.02);
        }
        100% {
            box-shadow: 0 0 15px rgba(205, 127, 50, 0.4);
            transform: scale(1);
        }
    }

    @@keyframes whiteGlow {
        0% {
            box-shadow: 0 0 20px rgba(255, 255, 255, 0.6);
            transform: scale(1);
        }
        50% {
            box-shadow: 0 0 30px rgba(255, 255, 255, 0.8),
                       0 0 40px rgba(255, 255, 255, 0.4),
                       0 0 50px rgba(255, 255, 255, 0.2);
            transform: scale(1.02);
        }
        100% {
            box-shadow: 0 0 20px rgba(255, 255, 255, 0.6);
            transform: scale(1);
        }
    }

    .user-profile-content {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
        position: relative;
        transition: transform 0.3s ease;
    }

    .user-profile-content:hover {
        transform: translateY(-2px);
    }

    .user-avatar {
        width: 45px;
        height: 45px;
        border-radius: 50%;
        overflow: hidden;
        background-color: #fff;
        border: 2px solid rgba(255, 255, 255, 0.2);
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
        transition: all 0.3s ease;
        position: relative;
    }

    .user-avatar img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        object-position: center;
        display: block;
    }

    .user-avatar.superadmin {
        border-color: rgba(255, 215, 0, 0.5);
        box-shadow: 0 0 10px rgba(255, 215, 0, 0.3);
    }

    .user-avatar.admin {
        border-color: rgba(192, 192, 192, 0.5);
        box-shadow: 0 0 10px rgba(192, 192, 192, 0.3);
    }

    .user-avatar.client {
        border-color: rgba(255, 255, 255, 0.8);
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
    }

    .user-avatar:hover {
        transform: scale(1.1);
        box-shadow: 0 0 15px rgba(255, 255, 255, 0.4);
    }

    .username {
        font-weight: 600;
        color: #fff;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        text-shadow: 0 0 10px rgba(255, 255, 255, 0.4);
        transition: all 0.3s ease;
    }

    .username.superadmin {
        color: #000;
        text-shadow: 0 0 10px rgba(255, 215, 0, 0.6);
    }

    .username.admin {
        color: #000;
        text-shadow: 0 0 10px rgba(192, 192, 192, 0.6);
    }

    .username.client {
        color: #000;
        text-shadow: 0 0 10px rgba(255, 255, 255, 0.8);
    }

    .role {
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.8);
        opacity: 0.8;
        text-shadow: 0 0 5px rgba(255, 255, 255, 0.2);
        transition: all 0.3s ease;
    }

    .role.superadmin {
        color: #000;
        opacity: 0.8;
        text-shadow: 0 0 5px rgba(255, 215, 0, 0.4);
    }

    .role.admin {
        color: #000;
        opacity: 0.8;
        text-shadow: 0 0 5px rgba(192, 192, 192, 0.4);
    }

    .role.client {
        color: #000;
        opacity: 0.8;
        text-shadow: 0 0 5px rgba(255, 255, 255, 0.6);
    }

    .profile-dropdown {
        position: absolute;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        z-index: 9999;
        width: 200px;
        transition: all 0.3s ease;
        pointer-events: all;
    }

    /* Dropdown positioning for non-collapsed sidebar */
    .sidebar:not(.collapsed) .profile-dropdown {
        bottom: calc(100% + 10px);
        left: 50%;
        transform: translateX(-50%);
    }

    /* Dropdown positioning for collapsed sidebar */
    .sidebar.collapsed .profile-dropdown {
        top: 0;
        left: calc(100% + 10px);
        transform: none;
    }

    .profile-dropdown::before {
        content: '';
        position: absolute;
        width: 12px;
        height: 12px;
        background: white;
        transform: rotate(45deg);
        z-index: -1;
        pointer-events: none;
    }

    /* Arrow positioning for non-collapsed sidebar */
    .sidebar:not(.collapsed) .profile-dropdown::before {
        bottom: -6px;
        left: 50%;
        margin-left: -6px;
        box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.1);
    }

    /* Arrow positioning for collapsed sidebar */
    .sidebar.collapsed .profile-dropdown::before {
        left: -6px;
        top: 15px;
        box-shadow: -3px 3px 8px rgba(0, 0, 0, 0.1);
    }

    .profile-dropdown-item {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.875rem 1.25rem;
        color: #333;
        text-decoration: none;
        transition: all 0.2s ease;
        position: relative;
        cursor: pointer;
        z-index: 9999;
    }

    .profile-dropdown-item:hover {
        background-color: rgba(255, 193, 7, 0.1);
        color: #000;
    }

    .profile-dropdown-item:first-child {
        border-radius: 12px 12px 0 0;
    }

    .profile-dropdown-item:last-child {
        border-radius: 0 0 12px 12px;
    }

    .profile-dropdown-item i {
        font-size: 1.1rem;
        color: #FFC107;
    }

    .profile-dropdown-item span {
        pointer-events: none;
    }

    /* Mobile responsive adjustments */
    @@media (max-width: 768px) {
        .sidebar:not(.collapsed) .profile-dropdown {
            bottom: calc(100% + 10px);
            left: 50%;
            transform: translateX(-50%);
            width: 90%;
            max-width: 200px;
        }

        .sidebar.collapsed .profile-dropdown {
            top: auto;
            bottom: calc(100% + 10px);
            left: 50%;
            transform: translateX(-50%);
            width: 200px;
        }

        .sidebar.collapsed .profile-dropdown::before {
            left: 50%;
            top: auto;
            bottom: -6px;
            margin-left: -6px;
            box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.1);
        }
    }

    .nav-content::-webkit-scrollbar {
        width: 4px;
    }

    .nav-content::-webkit-scrollbar-track {
        background: transparent;
    }

    .nav-content::-webkit-scrollbar-thumb {
        background: #FFC107;
        border-radius: 4px;
    }

    .nav-content::-webkit-scrollbar-thumb:hover {
        background: #ffca2c;
    }

    @@media (max-width: 770px) {
        .sidebar {
            transform: translateX(-100%);
            width: 100%;
            max-width: 300px;
        }

        .sidebar.show {
            transform: translateX(0);
        }

        .sidebar.collapsed {
            width: 80px;
        }

        .toggle-button {
            top: 90px;
            right: -16px;
            width: 32px;
            height: 32px;
        }
    }

    .hamburger-menu {
        display: none;
        position: fixed;
        top: 20px;
        left: 20px;
        z-index: 1000;
        background: #FFC107;
        border: none;
        border-radius: 8px;
        padding: 10px;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
    }

    .hamburger-menu:hover {
        background: #ffca2c;
        transform: scale(1.05);
    }

    .hamburger-menu i {
        font-size: 24px;
        color: #000;
    }

    @@media (max-width: 770px) {
        .hamburger-menu {
            display: block;
        }

        .sidebar {
            transform: translateX(-100%);
            width: 100%;
            max-width: 300px;
            left: 0;
            margin: 0;
            height: 100vh;
            border-radius: 0;
        }

        .sidebar.show {
            transform: translateX(0);
        }

        .sidebar.collapsed {
            width: 100%;
            max-width: 300px;
        }

        .toggle-button {
            display: none;
        }

        .sidebar.show .toggle-button {
            display: block;
            top: 90px;
            right: -16px;
            width: 32px;
            height: 32px;
        }
    }
    /*Notification*/
    .notification-button:hover {
        background-color: rgba(255, 255, 255, 0.2);
        transform: translateY(-2px);
    }

    .notification-button:focus {
        border: none;
        outline: none;
        box-shadow: none;
    }

    .notification-button:active {
        outline: none;
        box-shadow: none;
        border: none;
    }

    .notification-button i {
        font-size: 1.2rem;
        color: inherit;
    }

    /*Customize notification button color based on role*/
    .superadmin .notification-button {
        color: #000;
    }

    .admin .notification-button {
        color: #000;
    }

    .client .notification-button {
        color: #000;
    }

    .notification-modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    }

    .notification-modal-body {
        max-height: 400px;
        overflow-y: auto;
    }

    .notification-list {
        padding: 8px 0;
    }

    .notification-item {
        padding: 16px;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        transition: background-color 0.2s ease;
        cursor: pointer;
    }

    .notification-item:hover {
        background-color: rgba(0, 0, 0, 0.02);
    }

    .notification-item:last-child {
        border-bottom: none;
    }

    .notification-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 8px;
    }

    .notification-message {
        margin: 0;
        font-size: 0.9rem;
        color: #4a5568;
    }

    .notification-modal-footer {
        padding: 12px;
        border-top: 1px solid rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    .avatar-circle {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        overflow: hidden;
        background-color: #f8f9fa;
    }

    .avatar-circle img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    /* Custom scrollbar for notification list */
    .notification-modal-body::-webkit-scrollbar {
        width: 6px;
    }

    .notification-modal-body::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    .notification-modal-body::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 3px;
    }

    .notification-modal-body::-webkit-scrollbar-thumb:hover {
        background: #555;
    }

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 9998;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    @@keyframes modalFadeIn {
        from {
            opacity: 0;
            transform: translate(-50%, -48%);
        }
        to {
            opacity: 1;
            transform: translate(-50%, -50%);
        }
    }

    /* Profile Menu Icon Animations */
    .nav-link i.bi-house-fill {
        transition: transform 0.3s ease;
    }

    .nav-link:hover i.bi-house-fill {
        animation: homeFloat 0.6s ease-in-out;
    }

    .nav-link i.bi-person-fill {
        transition: transform 0.3s ease;
    }

    .nav-link:hover i.bi-person-fill {
        animation: profilePulse 0.6s ease-in-out;
    }

    .nav-link i.bi-box-arrow-right {
        transition: transform 0.3s ease;
    }

    .nav-link:hover i.bi-box-arrow-right {
        animation: logoutSlide 0.6s ease-in-out;
    }

    /* Animation Keyframes */
    @@keyframes homeFloat {
        0% { transform: translateY(0); }
        50% { transform: translateY(-4px) scale(1.1); }
        100% { transform: translateY(0); }
    }

    @@keyframes profilePulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.2) rotate(10deg); }
        100% { transform: scale(1); }
    }

    @@keyframes logoutSlide {
        0% { transform: translateX(0); }
        50% { transform: translateX(4px) scale(1.1); }
        75% { transform: translateX(-2px); }
        100% { transform: translateX(0); }
    }

    /* Submenu Styles */
    .nav-link.has-submenu {
        position: relative;
        cursor: pointer;
    }

    /* Remove the arrow by removing the ::after pseudo-element */
    /* .nav-link.has-submenu::after {
        content: '\F282';
        font-family: 'bootstrap-icons';
        position: absolute;
        right: 1rem;
        transition: transform 0.3s ease;
    }

    .nav-link.has-submenu.expanded::after {
        transform: rotate(90deg);
    } */

    /* Submenu Icon Animations */
    .submenu .nav-link:hover i {
        animation: submenuPop 0.5s ease-in-out;
    }

    @@keyframes submenuPop {
        0% { transform: scale(1); }
        50% { transform: scale(1.2); }
        100% { transform: scale(1); }
    }

    /* Submenu Styles */
    .submenu {
        margin-left: 2.5rem;
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.3s ease-out, opacity 0.3s ease-out;
        opacity: 0;
        position: relative;
    }

    .submenu.show {
        max-height: 200px;
        opacity: 1;
    }

    .submenu .nav-item {
        margin-bottom: 0.5rem;
        transform: translateX(-10px);
        transition: transform 0.3s ease-out;
    }

    .submenu.show .nav-item {
        transform: translateX(0);
    }

    .submenu .nav-link {
        font-size: 0.95rem;
        padding: 0.75rem 1rem;
        opacity: 0.9;
        margin-left: 0.5rem;
        border-left: 2px solid rgba(255, 193, 7, 0.2);
    }

    .submenu .nav-link:hover {
        opacity: 1;
        border-left: 2px solid #FFC107;
        background: rgba(255, 193, 7, 0.1);
    }

    /* Concern and Request specific styles */
    .nav-link.has-submenu {
        cursor: pointer;
    }

    .nav-link.has-submenu:hover {
        cursor: pointer;
    }

    .nav-link.has-submenu i.bi-receipt {
        margin-right: 0.5rem;
    }

    /* Enhanced submenu icon animations */
    .submenu .nav-link i.bi-list-check,
    .submenu .nav-link i.bi-archive {
        margin-right: 0.75rem;
        transition: transform 0.3s ease;
    }

    .submenu .nav-link:hover i.bi-list-check {
        animation: checkBounce 0.5s ease-in-out;
    }

    .submenu .nav-link:hover i.bi-archive {
        animation: archiveFloat 0.5s ease-in-out;
    }

    @@keyframes checkBounce {
        0% { transform: scale(1); }
        50% { transform: scale(1.2) translateX(2px); }
        100% { transform: scale(1); }
    }

    @@keyframes archiveFloat {
        0% { transform: translateY(0); }
        50% { transform: translateY(-3px); }
        100% { transform: translateY(0); }
    }

    /* Concern Icon Animation */
    .nav-link:hover i.bi-exclamation-triangle {
        animation: concernShake 0.8s ease-in-out;
    }

    @@keyframes concernShake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-4px) rotate(-5deg); }
        75% { transform: translateX(4px) rotate(5deg); }
    }

    /* Request Icon Animation */
    .nav-link:hover i.bi-file-earmark-text {
        animation: requestBounce 0.8s cubic-bezier(0.36, 0, 0.66, -0.56);
    }

    @@keyframes requestBounce {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-6px); }
        75% { transform: translateY(3px); }
    }

    /* Suggestion Icon Animation */
    .nav-link:hover i.bi-lightbulb {
        animation: suggestionGlow 1s ease-in-out infinite;
    }

    @@keyframes suggestionGlow {
        0%, 100% { 
            transform: scale(1);
            filter: drop-shadow(0 0 2px rgba(255, 193, 7, 0.5));
        }
        50% { 
            transform: scale(1.1);
            filter: drop-shadow(0 0 8px rgba(255, 193, 7, 0.8));
        }
    }

    /* My Submissions Icon Animation */
    .nav-link:hover i.bi-collection {
        animation: collectionShuffle 0.8s ease-in-out;
    }

    @@keyframes collectionShuffle {
        0% { transform: translateX(0) scale(1); }
        25% { transform: translateX(-2px) scale(1.1); }
        50% { transform: translateX(4px) scale(0.95); }
        75% { transform: translateX(-4px) scale(1.05); }
        100% { transform: translateX(0) scale(1); }
    }
</style>

<div class="hamburger-menu" @onclick="ToggleMobileMenu">
    <i class="bi bi-list"></i>
</div>

<div class="sidebar @(IsSidebarCollapsed ? "collapsed" : "") @(IsMobileMenuOpen ? "show" : "")">
    <div class="header">
        @if (userRole == "Client")
        {
            <i class="bi bi-house-fill header-icon"></i>
            <h1 class="header-title">Homeowners</h1>
        }
        else
        {
            <i class="bi bi-gear-fill header-icon"></i>
            <h1 class="header-title">Administrator</h1>
        }
        <button class="toggle-button" @onclick="ToggleSidebar">
            <i class="bi bi-chevron-left"></i>
        </button>
    </div>
    <div class="nav-content">
        <div class="nav-section">
            <div class="nav-section-header">MAIN MENU</div>
            
            <AuthorizeView Roles="SuperAdmin,Admin,User">
                <Authorized>
                    <div class="nav-item">
                        <NavLink class="nav-link" href="/Admin" Match="NavLinkMatch.All">
                            <i class="bi bi-speedometer2"></i>
                            <span>Dashboard</span>
                        </NavLink>
                    </div>
                </Authorized>
            </AuthorizeView>

            <AuthorizeView Roles="SuperAdmin,Admin">
                <Authorized>
                    <div class="nav-item">
                        <NavLink class="nav-link" href="/admin/users">
                            <i class="bi bi-people"></i>
                            <span>User Management</span>
                        </NavLink>
                    </div>
                </Authorized>
            </AuthorizeView>

            <AuthorizeView Roles="SuperAdmin,Admin,User,Client">
                <Authorized>
                    <div class="nav-item">
                        <NavLink class="nav-link" href="/ClientManagement">
                            <i class="bi bi-houses"></i>
                            <span>Homeowners Manage</span>
                        </NavLink>
                    </div>
                    
                    <div class="nav-item">
                        <NavLink class="nav-link" href="/admin/event-planning">
                            <i class="fas fa-calendar"></i>
                            <span>Event Planning</span>
                        </NavLink>
                    </div>

                    <div class="nav-item">
                        <div class="nav-link has-submenu @(isSubmenuExpanded ? "expanded" : "")" @onclick="ToggleSubmenu">
                            <i class="bi bi-receipt"></i>
                            <span>Concern and Request</span>
                        </div>
                        <div class="submenu @(isSubmenuExpanded ? "show" : "")">
                            <div class="nav-item">
                                <NavLink class="nav-link" href="/admin/concerns" Match="NavLinkMatch.All">
                                    <i class="bi bi-list-check"></i>
                                    <span>Concerns</span>
                                </NavLink>
                            </div>
                            <div class="nav-item">
                                <NavLink class="nav-link" href="/admin/concerns/archive">
                                    <i class="bi bi-archive"></i>
                                    <span>Archive</span>
                                </NavLink>
                            </div>
                        </div>
                    </div>
                    </Authorized>
                </AuthorizeView>

            <AuthorizeView Roles="SuperAdmin,Admin,User">
                <Authorized>
                    <div class="nav-item">
                        <NavLink class="nav-link" href="/board-messages">
                            <i class="bi bi-chat-square-text"></i>
                            <span>Board Messages</span>
                        </NavLink>
                    </div>
                </Authorized>
            </AuthorizeView>
                
          
            <AuthorizeView Roles="Client">
                <Authorized>
                    <div class="nav-item">
                        <NavLink class="nav-link" href="/client/dashboard" Match="NavLinkMatch.All">
                            <i class="bi bi-house-door nav-icon"></i>
                            <span class="nav-text">Home</span>
                        </NavLink>
                    </div>

                    <div class="nav-section">
                        <div class="nav-section-header">REQUEST & CONCERN</div>
                        <div class="nav-item">
                            <NavLink class="nav-link" href="/client/submit/concern">
                                <i class="bi bi-exclamation-triangle"></i>
                                <span>Submit Concern</span>
                            </NavLink>
                        </div>
                        <div class="nav-item">
                            <NavLink class="nav-link" href="/client/submit/request">
                                <i class="bi bi-file-earmark-text"></i>
                                <span>Submit Request</span>
                            </NavLink>
                        </div>
                        <div class="nav-item">
                            <NavLink class="nav-link" href="/client/submit/suggestion">
                                <i class="bi bi-lightbulb"></i>
                                <span>Submit Suggestion</span>
                            </NavLink>
                        </div>
                        <div class="nav-item">
                            <NavLink class="nav-link" href="/client/my-submissions">
                                <i class="bi bi-collection"></i>
                                <span>My Submissions</span>
                            </NavLink>
                        </div>
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>
    </div>

    <div class="user-profile @(userRole == "SuperAdmin" ? "superadmin" : userRole == "Admin" ? "admin" : userRole == "Client" ? "client" : "")">
        <div class="user-profile-content" @onclick="ToggleProfileDropdown">
            <div class="user-avatar @(userRole == "SuperAdmin" ? "superadmin" : userRole == "Admin" ? "admin" : userRole == "Client" ? "client" : "")">
                <img src="@profilePhotoUrl"
                     alt="Profile Photo"
                     style="width: 100%; height: 100%; object-fit: cover;"
                     @onerror="HandleImageError" 
                     @onload="() => StateHasChanged()" />
            </div>
            <div class="user-info">
                <div class="username @(userRole == "SuperAdmin" ? "superadmin" : userRole == "Admin" ? "admin" : userRole == "Client" ? "client" : "")">@userName</div>
                <div class="role @(userRole == "SuperAdmin" ? "superadmin" : userRole == "Admin" ? "admin" : userRole == "Client" ? "client" : "")">@userRole</div>
            </div>
        </div>
        @if (isProfileDropdownVisible)
        {
            <div class="profile-dropdown">
                <a href="/" class="profile-dropdown-item">
                    <i class="bi bi-house-fill"></i>
                    <span>Home</span>
                </a>
                <a href="/Account" class="profile-dropdown-item">
                    <i class="bi bi-person-fill"></i>
                    <span>Profile</span>
                </a>
                <a href="#" @onclick="Logout" @onclick:preventDefault class="profile-dropdown-item">
                    <i class="bi bi-box-arrow-right"></i>
                    <span>Logout</span>
                </a>
            </div>
        }

        <button class="notification-button" @onclick="ToggleNotificationModal">
            <i class="bi bi-bell-fill"></i>
            @if (NotificationService.UnreadCount > 0)
            {
                <span class="notification-badge">
                    @(NotificationService.UnreadCount > 99 ? "99+" : NotificationService.UnreadCount.ToString())
                </span>
            }
        </button>
    </div>

    @if (isNotificationModalOpen)
    {
        <div class="modal-backdrop" @onclick="CloseNotificationModal">
            <div class="notification-modal" @onclick:stopPropagation>
                <div class="notification-modal-header">
                    <h6>Notifications</h6>
                    <div class="d-flex align-items-center gap-2">
                        @if (NotificationService.UnreadCount > 0)
                        {
                            <button class="btn btn-link p-0" @onclick="ClearAndCloseNotifications">
                                Clear All
                            </button>
                        }
                        <button type="button" class="btn-close" @onclick="CloseNotificationModal"></button>
                    </div>
                </div>
                <div class="notification-modal-body">
                    @if (NotificationService.UnreadCount == 0)
                    {
                        <div class="text-center text-muted py-4">
                            <i class="bi bi-bell-slash fs-2"></i>
                            <p class="mt-2">No new notifications</p>
                        </div>
                    }
                    else
                    {
                        <div class="notification-list">
                            @foreach (var notification in NotificationService.UnreadMessages)
                            {
                                <div class="notification-item" @onclick="() => NavigateToMessage(notification.MessageId)">
                                    <div class="notification-content">
                                        <div class="notification-header">
                                            <div class="d-flex align-items-center gap-3">
                                                <div class="avatar-circle" style="background-color: @GetUserColor(notification.Role);">
                                                    @if (!string.IsNullOrEmpty(notification.ProfilePicture))
                                                    {
                                                        <img src="@notification.ProfilePicture" alt="@notification.UserName" />
                                                    }
                                                    else
                                                    {
                                                        <img src="images/ProfilePic.svg" alt="@notification.UserName" />
                                                    }
                                                </div>
                                                <div class="d-flex flex-column">
                                                    <strong>@notification.UserName</strong>
                                                    <span class="badge @GetPriorityBadgeClass(notification.Priority)">
                                                        @notification.Priority
                                                    </span>
                                                </div>
                                            </div>
                                            <small class="text-muted">@GetTimeAgo(notification.Timestamp)</small>
                                        </div>
                                        <p class="notification-message">
                                            @{
                                                var content = notification.Content;
                                                if (content.Contains("\n"))
                                                {
                                                    @foreach (var line in content.Split('\n'))
                                                    {
                                                        if (!string.IsNullOrWhiteSpace(line))
                                                        {
                                                            <span>@line</span><br />
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    @content
                                                }
                                            }
                                        </p>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="notification-modal-footer">
                    <button class="btn btn-link w-100" @onclick="ViewAllNotifications">
                        View All Messages
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool isProfileDropdownVisible;
    private bool IsSidebarCollapsed;
    private bool IsMobileMenuOpen;
    private string profilePhotoUrl = "/ProfilePic.svg";
    private string? userName;
    private string? userEmail;
    private string? userRole;
    private bool isNotificationModalOpen;
    private bool isSubmenuExpanded;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            // Get user role from claims
            if (user.IsInRole("SuperAdmin"))
                userRole = "SuperAdmin";
            else if (user.IsInRole("Admin"))
                userRole = "Admin";
            else if (user.IsInRole("Client"))
                userRole = "Client";
            else
                userRole = "User";

            // Get user details from claims
            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userIdClaim) && int.TryParse(userIdClaim, out int userId))
            {
                try {
                    // Get full user details
                    var userDetails = await AccountService.GetById(userId);
                    userName = userDetails?.Username;
                    userEmail = userDetails?.Email;

                    // Get profile photo
                    var profileResponse = await AccountService.GetUserDetailsAsync(userId);
                    if (profileResponse.IsSuccess && profileResponse.Data != null)
                    {
                        var photoUrl = !string.IsNullOrEmpty(profileResponse.Data.PhotoUrl) 
                            ? $"{profileResponse.Data.PhotoUrl}?v={DateTime.Now.Ticks}"
                            : "/ProfilePic.svg";
                            
                        profilePhotoUrl = photoUrl;
                        ProfilePhotoService.UpdateProfilePhoto(photoUrl);
                    }
                }
                catch {
                    // Fallback to claims if API call fails
                    userName = user.FindFirst("username")?.Value ?? 
                              user.FindFirst(ClaimTypes.Name)?.Value ?? 
                              "User";
                }
            }
        }

        ProfilePhotoService.OnProfilePhotoChange += HandleProfilePhotoChange;
        await LoadProfilePhoto();
        await NotificationService.InitializeAsync();
        NotificationService.OnNotificationsChanged += StateHasChanged;
    }

    private void ToggleProfileDropdown()
    {
        isProfileDropdownVisible = !isProfileDropdownVisible;
    }

    private void ToggleSidebar()
    {
        IsSidebarCollapsed = !IsSidebarCollapsed;
    }

    private async Task LoadProfilePhoto()
    {
        var currentPhotoUrl = ProfilePhotoService.CurrentPhotoUrl;
        if (!string.IsNullOrEmpty(currentPhotoUrl))
        {
            // Add timestamp to force refresh
            profilePhotoUrl = currentPhotoUrl.Contains("?") 
                ? currentPhotoUrl 
                : $"{currentPhotoUrl}?v={DateTime.Now.Ticks}";
            StateHasChanged();
        }
    }

    private void HandleProfilePhotoChange(string newPhotoUrl)
    {
        // Add timestamp to force refresh if it's not the default photo
        profilePhotoUrl = newPhotoUrl.Contains("/ProfilePic.svg") 
            ? newPhotoUrl 
            : $"{newPhotoUrl}?v={DateTime.Now.Ticks}";
        StateHasChanged();
    }

    private void HandleImageError(ErrorEventArgs e)
    {
        profilePhotoUrl = "/ProfilePic.svg";
        ProfilePhotoService.UpdateProfilePhoto(profilePhotoUrl);
        StateHasChanged();
    }

    private async Task Logout()
    {
        await NotificationService.ClearUserNotificationsAsync();
        await _localStorageService.RemoveItemAsync("jwt-access-token");
        if (_authStateProvider is CustomAuthProvider authProvider)
        {
            await authProvider.Logout();
        }
        _navigationManager.NavigateTo("/", true);
    }

    private void ToggleMobileMenu()
    {
        IsMobileMenuOpen = !IsMobileMenuOpen;
    }

    public void Dispose()
    {
        ProfilePhotoService.OnProfilePhotoChange -= HandleProfilePhotoChange;
        NotificationService.OnNotificationsChanged -= StateHasChanged;
    }

    private void ToggleNotificationModal()
    {
        isNotificationModalOpen = !isNotificationModalOpen;
    }

    private void CloseNotificationModal()
    {
        isNotificationModalOpen = false;
        StateHasChanged();
    }

    private async Task ClearAndCloseNotifications()
    {
        await NotificationService.ClearNotifications();
        CloseNotificationModal();
    }

    private async Task NavigateToMessage(int messageId)
    {
        CloseNotificationModal();
        await NotificationService.NavigateToMessage(messageId);
    }

    private async Task ViewAllNotifications()
    {
        // Only mark non-concern notifications as read
        var notifications = NotificationService.UnreadMessages
            .Where(m => m.Type != "RequestSubmission" && 
                       m.Type != "ConcernSubmission" && 
                       m.Type != "SuggestionSubmission")
            .ToList();
            
        foreach (var notification in notifications)
        {
            await NotificationService.MarkAsRead(notification.MessageId);
        }
        
        CloseNotificationModal();
        _navigationManager.NavigateTo("/board-messages");
    }

    private string GetPriorityBadgeClass(MessagePriority priority) => priority switch
    {
        MessagePriority.Emergency => "bg-danger",
        MessagePriority.Priority => "bg-warning text-dark",
        MessagePriority.Announcement => "bg-success",
        _ => "bg-secondary"
    };

    private string GetTruncatedMessage(string content)
    {
        return content.Length > 100 ? content.Substring(0, 97) + "..." : content;
    }

    private string GetTimeAgo(DateTime timestamp)
    {
        var span = DateTime.UtcNow - timestamp;
        if (span.TotalMinutes < 1) return "just now";
        if (span.TotalMinutes < 60) return $"{(int)span.TotalMinutes}m ago";
        if (span.TotalHours < 24) return $"{(int)span.TotalHours}h ago";
        return $"{(int)span.TotalDays}d ago";
    }

    private string GetUserColor(string role)
    {
        return role switch
        {
            "SuperAdmin" => "#dc3545",
            "Admin" => "#0d6efd",
            "User" => "#198754",
            _ => "#6c757d"
        };
    }

    private void ToggleSubmenu()
    {
        isSubmenuExpanded = !isSubmenuExpanded;
    }
}
