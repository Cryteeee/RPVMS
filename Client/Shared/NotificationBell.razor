@using BlazorApp1.Client.Services
@using BlazorApp1.Shared
@using BlazorApp1.Shared.Models
@using BlazorApp1.Shared.Enums
@inject INotificationService NotificationService
@implements IDisposable

<div class="notification-bell">
    <div class="dropdown">
        <button class="btn btn-link position-relative p-0" @onclick="ToggleDropdown" aria-expanded="@_isOpen">
            <i class="bi bi-bell-fill fs-5"></i>
            @if (NotificationService.UnreadCount > 0)
            {
                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                    @(NotificationService.UnreadCount > 99 ? "99+" : NotificationService.UnreadCount.ToString())
                </span>
            }
        </button>

        @if (_isOpen)
        {
            <div class="dropdown-menu notification-dropdown show" @onclick:stopPropagation>
                <div class="notification-header">
                    <h6 class="dropdown-header">Notifications</h6>
                    @if (NotificationService.UnreadCount > 0)
                    {
                        <button class="btn btn-link btn-sm text-decoration-none" @onclick="ClearAllNotifications">
                            Clear All
                        </button>
                    }
                </div>
                @if (NotificationService.UnreadCount == 0)
                {
                    <div class="dropdown-item text-muted">
                        <div class="text-center py-3">
                            <i class="bi bi-bell-slash fs-4 text-muted"></i>
                            <p class="mt-2 mb-0">No new notifications</p>
                        </div>
                    </div>
                }
                else
                {
                    <div class="notification-list">
                        @foreach (var message in NotificationService.UnreadMessages)
                        {
                            <div class="dropdown-item p-0" @onclick="() => NavigateToMessage(message.MessageId)">
                                <NotificationTemplates Message="@message" />
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>

<style>
    .notification-bell {
        position: relative;
    }

    .notification-bell .btn-link {
        color: #000000;
    }

    .notification-bell .btn-link:hover {
        color: #FFB800;
    }

    .badge.rounded-pill.bg-danger {
        background-color: #FFB800 !important;
        color: #000000;
    }

    .notification-dropdown {
        position: absolute;
        right: 0;
        top: 100%;
        width: 380px;
        max-height: 500px;
        overflow-y: auto;
        box-shadow: 0 8px 24px rgba(255, 184, 0, 0.15);
        border-radius: 12px;
        border: 1px solid rgba(255, 184, 0, 0.2);
        padding: 0.5rem 0;
        z-index: 1000;
        background: white;
    }

    .notification-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 1rem;
        border-bottom: 1px solid rgba(255, 184, 0, 0.2);
    }

    .notification-list {
        padding: 0.5rem;
    }

    .dropdown-item {
        padding: 0;
        border: none;
    }

    .dropdown-item:hover {
        background: none;
    }

    .btn-link {
        color: #000000;
        text-decoration: none;
    }

    .btn-link:hover {
        color: #FFB800;
        text-decoration: none;
    }

    /* Custom scrollbar */
    .notification-dropdown::-webkit-scrollbar {
        width: 6px;
    }

    .notification-dropdown::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
    }

    .notification-dropdown::-webkit-scrollbar-thumb {
        background: #FFB800;
        border-radius: 3px;
    }

    .notification-dropdown::-webkit-scrollbar-thumb:hover {
        background: #e6a800;
    }
</style>

@code {
    private bool _isOpen;

    protected override async Task OnInitializedAsync()
    {
        await NotificationService.InitializeAsync();
        NotificationService.OnNotificationsChanged += StateHasChanged;
    }

    private void ToggleDropdown()
    {
        _isOpen = !_isOpen;
    }

    private async Task NavigateToMessage(int messageId)
    {
        _isOpen = false;
        await NotificationService.NavigateToMessageWithoutMarkingRead(messageId);
    }

    private async Task ClearAllNotifications()
    {
        await NotificationService.ClearNotifications();
    }

    public void Dispose()
    {
        NotificationService.OnNotificationsChanged -= StateHasChanged;
    }
} 